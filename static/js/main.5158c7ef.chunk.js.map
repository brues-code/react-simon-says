{"version":3,"sources":["styles/image/wood.jpg","sounds/applause.wav","sounds/aww.wav","sounds/a_sharp.wav","sounds/c_sharp.wav","sounds/f_sharp.wav","sounds/g_sharp.wav","enums.ts","utils/getRandomBoardColor.ts","utils/sounds.ts","styles/theme/color.ts","utils/addYearsToToday.ts","app-constants.ts","app/context/AppContext.tsx","utils/zip-array.ts","lib/i18n/index.ts","lib/i18n/messages.en.ts","lib/i18n/messages.es.ts","lib/i18n/messages.fr.ts","app/context/IntlContext.tsx","app/components/CurrentHighScore/styles.ts","app/components/CurrentHighScore/CurrentHighScore.tsx","app/components/LocaleChooser/styles.ts","app/components/LocaleChooser/LocaleChooser.tsx","app/components/SoundToggle/SoundToggle.tsx","app/components/Button/styles.ts","app/components/Button/Button.tsx","utils/getButtonColor.ts","app/components/SimonBoard/styles.ts","app/components/SimonBoard/SimonBoard.tsx","app/components/SiteTitle/SiteTitle.tsx","app/components/StartButton/styles.ts","app/components/StartButton/StartButton.tsx","app/views/board/styles.ts","app/views/board/board.tsx","app/styles.ts","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ButtonColor","Locales","Cookies","getRandomBoardColor","colors","Object","keys","map","e","Math","floor","random","length","APPLAUSE","require","AWW","A_SHARP","C_SHARP","F_SHARP","G_SHARP","playSound","file","audio","Audio","volume","play","then","remove","playButtonSound","buttonColor","Red","Blue","Yellow","Green","getButtonSound","color","$Green","$Green_Lit","$Red","$Red_Lit","$Yellow","$Yellow_Lit","$Blue","$Blue_Lit","addYearsToToday","years","dt","Date","setFullYear","getFullYear","ButtonOrder","DEFAULT_LOCALE","en","initialState","allowUserInput","canStartRound","clearHighScore","noop","currentHighScore","currentLocale","handleUpdateLocale","onButtonClick","roundData","soundEnabled","startGame","toggleSound","userSelectedValues","AppContext","createContext","useApp","useContext","AppContextProvider","children","useCookies","cookies","setCookie","removeCookie","useState","setRoundData","currentLitColor","setCurrentLitColor","toggleUserInput","setUserSelectedValues","toggleCanStartRound","SOUND","onToggleSound","LOCALE","setCurrentLocale","currentRoundData","last","currentRound","roundId","Number","HIGH_SCORE","onPlayCrowdSound","crowdSound","onPlayButtonSound","handleSetCookie","cookie","value","expires","showRoundColors","colorRotation","a","b","ret","maxLen","i","push","zipArray","fill","range","setColor","index","currentColor","forEach","ix","delay","attemptGuess","correct","isCorrectGuess","allAnswersCorrect","guesses","isEqual","slice","contextState","locale","newValues","concat","createNewRoundData","Provider","AppMessages","es","fr","IntlContext","messages","HighScoreHeader","styled","h2","ClearHighScoreButton","button","CurrentHighScore","formatMessage","useIntl","id","onClick","title","LocaleChooserRow","div","LocaleSelect","select","LocaleChooser","options","key","chooserDisabled","disabled","onChange","target","SoundToggle","style","paddingTop","type","name","checked","SimonButton","unlit","lit","isLit","Button","getButtonColorInfo","ButtonRow","SimonBoard","renderButton","row","SiteTitle","Helmet","StyledStartButton","StartButton","buttonId","nextRound","getButtonText","BoardContainer","Board","OutsideWrapper","wood","MiddleWrapper","InnerContent","App","theme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5158c7ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wood.97685270.jpg\";","module.exports = __webpack_public_path__ + \"static/media/applause.9cb7c788.wav\";","module.exports = __webpack_public_path__ + \"static/media/aww.827dbe6b.wav\";","module.exports = __webpack_public_path__ + \"static/media/a_sharp.8c41f6e6.wav\";","module.exports = __webpack_public_path__ + \"static/media/c_sharp.8b562331.wav\";","module.exports = __webpack_public_path__ + \"static/media/f_sharp.720b7b95.wav\";","module.exports = __webpack_public_path__ + \"static/media/g_sharp.14433c26.wav\";","export enum ButtonColor {\r\n    Red = 'Red',\r\n    Blue = 'Blue',\r\n    Yellow = 'Yellow',\r\n    Green = 'Green'\r\n}\r\n\r\nexport enum Locales {\r\n    en = 'en',\r\n    es = 'es',\r\n    fr = 'fr'\r\n}\r\n\r\nexport enum Cookies {\r\n    SOUND = 'sound',\r\n    HIGH_SCORE = 'high_score',\r\n    LOCALE = 'locale'\r\n}\r\n","import { range } from 'lodash';\r\nimport { ButtonColor } from 'enums';\r\n\r\nexport function getRandomBoardColor(): ButtonColor {\r\n    const colors = Object.keys(ButtonColor).map(e => ButtonColor[e]);\r\n    const randomInt = Math.floor(Math.random() * colors.length);\r\n    return colors[randomInt];\r\n}\r\n\r\nexport const getRandomBoardColors = (count: number): ButtonColor[] => range(count).map(getRandomBoardColor);\r\n","import { ButtonColor } from 'enums';\r\nimport { CrowdSounds } from 'types/crowd';\r\n\r\nconst APPLAUSE = require('sounds/applause.wav');\r\nconst AWW = require('sounds/aww.wav');\r\nconst A_SHARP = require('sounds/a_sharp.wav');\r\nconst C_SHARP = require('sounds/c_sharp.wav');\r\nconst F_SHARP = require('sounds/f_sharp.wav');\r\nconst G_SHARP = require('sounds/g_sharp.wav');\r\n\r\nfunction getButtonSound(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return A_SHARP;\r\n        case ButtonColor.Blue:\r\n            return C_SHARP;\r\n        case ButtonColor.Yellow:\r\n            return G_SHARP;\r\n        case ButtonColor.Green:\r\n            return F_SHARP;\r\n        default:\r\n            return F_SHARP;\r\n    }\r\n}\r\n\r\nfunction playSound(file: string) {\r\n    const audio = new Audio(file);\r\n    audio.volume = 0.5;\r\n    audio.play().then(() => audio.remove());\r\n}\r\n\r\nexport function playButtonSound(buttonColor: ButtonColor) {\r\n    const sound = getButtonSound(buttonColor);\r\n    playSound(sound);\r\n}\r\n\r\nexport function playCrowdSound(sound: CrowdSounds) {\r\n    const soundToPlay = sound === 'applause' ? APPLAUSE : AWW;\r\n    playSound(soundToPlay);\r\n}\r\n","export const color = {\r\n    $Green: '#23A623',\r\n    $Green_Lit: '#00F500',\r\n    $Red: '#B50D0D',\r\n    $Red_Lit: '#FF0000',\r\n    $Yellow: '#C2B206',\r\n    $Yellow_Lit: '#FFFF00',\r\n    $Blue: '#5454C4',\r\n    $Blue_Lit: '#0000FF'\r\n};\r\n","export function addYearsToToday(years: number): Date {\r\n    const dt = new Date();\r\n    return new Date(dt.setFullYear(dt.getFullYear() + years));\r\n}\r\n","import { ButtonColor, Locales } from 'enums';\r\n\r\nexport const ButtonOrder = [\r\n    [ButtonColor.Green, ButtonColor.Yellow],\r\n    [ButtonColor.Red, ButtonColor.Blue]\r\n];\r\n\r\nexport const DEFAULT_LOCALE = Locales.en;\r\n","import React, { createContext, FC, useState, useContext, Dispatch } from 'react';\r\nimport { delay, range, isEqual, last, fill, noop } from 'lodash';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { Round } from 'types/round';\r\nimport { CrowdSounds } from 'types/crowd';\r\nimport { getRandomBoardColor, zipArray, playButtonSound, playCrowdSound, addYearsToToday } from 'utils';\r\nimport { ButtonColor, Locales, Cookies } from 'enums';\r\nimport { DEFAULT_LOCALE } from 'app-constants';\r\n\r\ninterface State {\r\n    allowUserInput: boolean;\r\n    canStartRound: boolean;\r\n    clearHighScore: () => void;\r\n    currentHighScore: number;\r\n    currentLitColor?: ButtonColor;\r\n    currentLocale: Locales;\r\n    currentRound?: number;\r\n    handleUpdateLocale: Dispatch<Locales>;\r\n    onButtonClick: Dispatch<ButtonColor>;\r\n    roundData: Round[];\r\n    soundEnabled: boolean;\r\n    startGame: () => void;\r\n    toggleSound: Dispatch<boolean>;\r\n    userSelectedValues: ButtonColor[];\r\n}\r\n\r\nconst initialState: State = {\r\n    allowUserInput: false,\r\n    canStartRound: true,\r\n    clearHighScore: noop,\r\n    currentHighScore: 0,\r\n    currentLocale: DEFAULT_LOCALE,\r\n    handleUpdateLocale: noop,\r\n    onButtonClick: noop,\r\n    roundData: [],\r\n    soundEnabled: true,\r\n    startGame: noop,\r\n    toggleSound: noop,\r\n    userSelectedValues: []\r\n};\r\n\r\nexport const AppContext = createContext(initialState);\r\n\r\nconst AppContextProvider: FC = ({ children }) => {\r\n    const [cookies, setCookie, removeCookie] = useCookies(Object.keys(Cookies).map(e => Cookies[e]));\r\n    const [roundData, setRoundData] = useState(initialState.roundData);\r\n    const [currentLitColor, setCurrentLitColor] = useState(initialState.currentLitColor);\r\n    const [allowUserInput, toggleUserInput] = useState(initialState.allowUserInput);\r\n    const [userSelectedValues, setUserSelectedValues] = useState(initialState.userSelectedValues);\r\n    const [canStartRound, toggleCanStartRound] = useState(initialState.canStartRound);\r\n    const [soundEnabled, onToggleSound] = useState(\r\n        cookies[Cookies.SOUND] ? cookies[Cookies.SOUND] === 'true' : initialState.soundEnabled\r\n    );\r\n    const [currentLocale, setCurrentLocale] = useState(cookies[Cookies.LOCALE] || initialState.currentLocale);\r\n\r\n    const currentRoundData = last(roundData);\r\n    const currentRound = currentRoundData?.roundId || 0;\r\n    const currentHighScore = Number(cookies[Cookies.HIGH_SCORE] || 0);\r\n\r\n    const createNewRoundData = () => {\r\n        const roundId = currentRound + 1;\r\n        const color = (currentRoundData?.color || []).concat([getRandomBoardColor()]);\r\n        setRoundData(roundData.concat({ roundId, color }));\r\n        showRoundColors(color);\r\n    };\r\n\r\n    const toggleSound: Dispatch<boolean> = value => {\r\n        onToggleSound(value);\r\n        handleSetCookie(Cookies.SOUND, value);\r\n    };\r\n\r\n    const onPlayCrowdSound: Dispatch<CrowdSounds> = crowdSound => soundEnabled && playCrowdSound(crowdSound);\r\n    const onPlayButtonSound: Dispatch<ButtonColor> = color => soundEnabled && playButtonSound(color);\r\n    const handleSetCookie = (cookie: Cookies, value: any) => {\r\n        setCookie(cookie, value, { expires: addYearsToToday(10) });\r\n    };\r\n\r\n    const setHighScore = () => {\r\n        if (currentRound > currentHighScore) {\r\n            onPlayCrowdSound('applause');\r\n            handleSetCookie(Cookies.HIGH_SCORE, currentRound);\r\n        }\r\n    };\r\n\r\n    const clearHighScore = () => removeCookie(Cookies.HIGH_SCORE);\r\n\r\n    const startGame = () => {\r\n        toggleUserInput(false);\r\n        toggleCanStartRound(false);\r\n        createNewRoundData();\r\n    };\r\n\r\n    const showRoundColors: Dispatch<ButtonColor[]> = colors => {\r\n        const emptyArray = fill(range(colors.length), null);\r\n        const colorRotation = zipArray(colors, emptyArray);\r\n        const setColor = (index: number) => {\r\n            if (index === colorRotation.length - 1) {\r\n                toggleUserInput(true);\r\n            }\r\n            const currentColor = colorRotation[index];\r\n            if (currentColor) {\r\n                onPlayButtonSound(currentColor);\r\n            }\r\n            setCurrentLitColor(currentColor);\r\n        };\r\n\r\n        colorRotation.forEach((color, ix) => delay(setColor, 1000 * (ix + 1), ix));\r\n    };\r\n\r\n    const attemptGuess: Dispatch<ButtonColor[]> = colors => {\r\n        const correct = isCorrectGuess(colors);\r\n        const allAnswersCorrect = correct && colors.length === currentRoundData?.color.length;\r\n        if (!correct) {\r\n            setRoundData([]);\r\n            onPlayCrowdSound('aww');\r\n        }\r\n        if (allAnswersCorrect) {\r\n            setHighScore();\r\n        }\r\n        if (allAnswersCorrect || !correct) {\r\n            toggleUserInput(false);\r\n            setUserSelectedValues([]);\r\n            toggleCanStartRound(true);\r\n        }\r\n    };\r\n\r\n    const isCorrectGuess = (guesses: ButtonColor[]) =>\r\n        isEqual(guesses, currentRoundData?.color.slice(0, guesses.length));\r\n\r\n    const onButtonClick: Dispatch<ButtonColor> = color => {\r\n        if (currentRound && allowUserInput) {\r\n            onPlayButtonSound(color);\r\n            if (userSelectedValues.length < currentRound) {\r\n                const newValues = userSelectedValues.concat(color);\r\n                setCurrentLitColor(color);\r\n                delay(setCurrentLitColor, 500, null);\r\n                setUserSelectedValues(newValues);\r\n                attemptGuess(newValues);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleUpdateLocale: Dispatch<Locales> = locale => {\r\n        setCurrentLocale(locale);\r\n        handleSetCookie(Cookies.LOCALE, locale);\r\n    };\r\n\r\n    const contextState = {\r\n        ...initialState,\r\n        allowUserInput,\r\n        canStartRound,\r\n        clearHighScore,\r\n        currentHighScore,\r\n        currentLitColor,\r\n        currentLocale,\r\n        currentRound,\r\n        handleUpdateLocale,\r\n        onButtonClick,\r\n        roundData,\r\n        soundEnabled,\r\n        startGame,\r\n        toggleSound,\r\n        userSelectedValues\r\n    };\r\n\r\n    return <AppContext.Provider value={contextState}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport const useApp = () => useContext(AppContext);\r\n\r\nexport default AppContextProvider;\r\n","export function zipArray(a: any[], b: any[]): any[] {\r\n    const ret = [];\r\n    const maxLen = a.length > b.length ? a.length : b.length;\r\n    for (let i = 0; i < maxLen; i++) {\r\n        ret.push(a[i]);\r\n        ret.push(b[i]);\r\n    }\r\n    return ret;\r\n}\r\n","import { Messages } from 'types/i18n';\n\nimport en from './messages.en';\nimport es from './messages.es';\nimport fr from './messages.fr';\n\nexport const AppMessages: { [languageCode: string]: Messages } = {\n    en,\n    es,\n    fr\n};\nexport default AppMessages;\n","import { Messages } from 'types/i18n';\n\nconst messages: Messages = {\n    'clearHighScore.button.text': 'Clear',\n    'clearHighScore.button.title': 'Clear high score',\n    'clearHighScore.header': 'High Score: {currentHighScore}',\n    'clearHighScore.header.empty': 'No High Score',\n    'default.document.title': 'React Simon Says',\n    'localeChooser.label': 'Locale:',\n    'localeChooser.value.en': 'English',\n    'localeChooser.value.es': 'Spanish',\n    'localeChooser.value.fr': 'French',\n    'soundToggle.label': 'Sound',\n    'soundToggle.title': 'Toggle Sound',\n    'startButton.text.inProgress': 'In Progress',\n    'startButton.text.startGame': 'Start Game',\n    'startButton.text.startGuess': 'Start Guessing',\n    'startButton.text.startRound': 'Start Round {nextRound}'\n};\n\nexport default messages;\n","import { Messages } from 'types/i18n';\n\nconst messages: Messages = {\n    'clearHighScore.button.text': 'Clara',\n    'clearHighScore.button.title': 'Puntuación alta clara',\n    'clearHighScore.header': 'Puntuación Alta: {currentHighScore}',\n    'clearHighScore.header.empty': 'No Puntuación Alta',\n    'default.document.title': 'React Simón Dice',\n    'localeChooser.label': 'Localización:',\n    'localeChooser.value.en': 'Inglés',\n    'localeChooser.value.es': 'Español',\n    'localeChooser.value.fr': 'Francés',\n    'soundToggle.label': 'Sonido',\n    'soundToggle.title': 'Cambiar el Sonido',\n    'startButton.text.inProgress': 'En progreso',\n    'startButton.text.startGame': 'Comenzar el juego',\n    'startButton.text.startGuess': 'Empieza a adivinar',\n    'startButton.text.startRound': 'Comienza la Ronda {nextRound}'\n};\n\nexport default messages;\n","import { Messages } from 'types/i18n';\r\n\r\nconst messages: Messages = {\r\n    'clearHighScore.button.text': 'Clair',\r\n    'clearHighScore.button.title': 'Score élevé clair',\r\n    'clearHighScore.header': 'Score élevé: {currentHighScore}',\r\n    'clearHighScore.header.empty': 'Pas de score élevé',\r\n    'default.document.title': 'React Simon Dit',\r\n    'localeChooser.label': 'Locale:',\r\n    'localeChooser.value.en': 'Anglais',\r\n    'localeChooser.value.es': 'Espagnol',\r\n    'localeChooser.value.fr': 'Français',\r\n    'soundToggle.label': 'Bruit',\r\n    'soundToggle.title': 'Basculer Bruit',\r\n    'startButton.text.inProgress': 'En cours',\r\n    'startButton.text.startGame': 'Démarrer le jeu',\r\n    'startButton.text.startGuess': 'Commencez à deviner',\r\n    'startButton.text.startRound': 'Début de la ronde {nextRound}'\r\n};\r\n\r\nexport default messages;\r\n","import React, { FC } from 'react';\r\nimport { IntlProvider } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\nimport AppMessages from 'lib/i18n';\r\n\r\nconst IntlContext: FC = ({ children }) => {\r\n    const { currentLocale } = useApp();\r\n    return (\r\n        <IntlProvider locale={currentLocale} messages={AppMessages[currentLocale]}>\r\n            {children}\r\n        </IntlProvider>\r\n    );\r\n};\r\n\r\nexport default IntlContext;\r\n","import styled from 'styled-components';\r\n\r\nexport const HighScoreHeader = styled.h2`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport const ClearHighScoreButton = styled.button`\r\n    margin-top: 4px;\r\n    margin-left: 8px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { HighScoreHeader, ClearHighScoreButton } from './styles';\r\n\r\nconst CurrentHighScore: FC = () => {\r\n    const { currentHighScore, clearHighScore } = useApp();\r\n    const { formatMessage } = useIntl();\r\n    return (\r\n        <HighScoreHeader>\r\n            {currentHighScore ? (\r\n                <>\r\n                    {formatMessage({ id: 'clearHighScore.header' }, { currentHighScore })}\r\n                    <ClearHighScoreButton\r\n                        onClick={clearHighScore}\r\n                        title={formatMessage({ id: 'clearHighScore.button.title' })}\r\n                    >\r\n                        {formatMessage({ id: 'clearHighScore.button.text' })}\r\n                    </ClearHighScoreButton>\r\n                </>\r\n            ) : (\r\n                formatMessage({ id: 'clearHighScore.header.empty' })\r\n            )}\r\n        </HighScoreHeader>\r\n    );\r\n};\r\n\r\nexport default CurrentHighScore;\r\n","import styled from 'styled-components';\r\n\r\nexport const LocaleChooserRow = styled.div`\r\n    width: 100%;\r\n    padding-top: 8px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\nexport const LocaleSelect = styled.select`\r\n    margin-left: 8px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\nimport { Locales } from 'enums';\r\n\r\nimport { LocaleChooserRow, LocaleSelect } from './styles';\r\n\r\nconst LocaleChooser: FC = () => {\r\n    const { currentLocale, handleUpdateLocale, allowUserInput, canStartRound } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const options = Object.keys(Locales)\r\n        .map(e => Locales[e])\r\n        .map(locale => (\r\n            <option key={locale} value={locale}>\r\n                {formatMessage({ id: `localeChooser.value.${locale}` })}\r\n            </option>\r\n        ));\r\n\r\n    const chooserDisabled = !(canStartRound || allowUserInput);\r\n\r\n    return (\r\n        <LocaleChooserRow>\r\n            {formatMessage({ id: 'localeChooser.label' })}\r\n            <LocaleSelect\r\n                disabled={chooserDisabled}\r\n                value={currentLocale}\r\n                onChange={e => handleUpdateLocale(Locales[e.target.value])}\r\n            >\r\n                {options}\r\n            </LocaleSelect>\r\n        </LocaleChooserRow>\r\n    );\r\n};\r\n\r\nexport default LocaleChooser;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nconst SoundToggle: FC = () => {\r\n    const { soundEnabled, toggleSound } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    return (\r\n        <div style={{ paddingTop: '4px' }}>\r\n            <input\r\n                type=\"checkbox\"\r\n                name=\"soundToggle\"\r\n                checked={soundEnabled}\r\n                onChange={e => toggleSound(e.target.checked)}\r\n                title={formatMessage({ id: 'soundToggle.title' })}\r\n            />\r\n            {formatMessage({ id: 'soundToggle.label' })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SoundToggle;\r\n","import styled from 'styled-components';\r\n\r\nimport { ButtonColorInfo } from 'utils';\r\n\r\ninterface SimonButtonProps extends ButtonColorInfo {\r\n    isLit: boolean;\r\n    allowUserInput: boolean;\r\n}\r\n\r\nexport const SimonButton = styled.div<SimonButtonProps>`\r\n    height: 25vh;\r\n    width: 25vh;\r\n    border-radius: 25px;\r\n    max-width: 49vw;\r\n    transition-duration: 0.4s;\r\n    -webkit-tap-highlight-color: transparent;\r\n    margin: 2px;\r\n    background-color: ${({ unlit }) => unlit};\r\n\r\n    :hover {\r\n        ${({ allowUserInput, lit }) => allowUserInput && `background-color: ${lit};`}\r\n    }\r\n\r\n    ${({ allowUserInput }) => allowUserInput && `cursor: pointer;`}\r\n    ${({ isLit, lit }) => isLit && `background-color: ${lit};`}\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonColor } from 'enums';\r\nimport { getButtonColorInfo } from 'utils';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { SimonButton } from './styles';\r\n\r\ntype Props = {\r\n    buttonColor: ButtonColor;\r\n};\r\n\r\nconst Button: FC<Props> = ({ buttonColor }) => {\r\n    const { currentLitColor, allowUserInput, onButtonClick } = useApp();\r\n\r\n    const onClick = () => onButtonClick(buttonColor);\r\n\r\n    return (\r\n        <SimonButton\r\n            allowUserInput={allowUserInput}\r\n            isLit={currentLitColor === buttonColor}\r\n            onClick={onClick}\r\n            {...getButtonColorInfo(buttonColor)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import { ButtonColor } from 'enums';\r\nimport { color } from 'styles/theme';\r\n\r\nexport interface ButtonColorInfo {\r\n    unlit: string;\r\n    lit: string;\r\n}\r\n\r\nexport function getButtonColorInfo(buttonColor: ButtonColor): ButtonColorInfo {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return { unlit: color.$Red, lit: color.$Red_Lit };\r\n        case ButtonColor.Blue:\r\n            return { unlit: color.$Blue, lit: color.$Blue_Lit };\r\n        case ButtonColor.Yellow:\r\n            return { unlit: color.$Yellow, lit: color.$Yellow_Lit };\r\n        default:\r\n            return { unlit: color.$Green, lit: color.$Green_Lit };\r\n    }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const ButtonRow = styled.div`\r\n    display: flex;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonOrder } from 'app-constants';\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport SimonButton from 'app/components/Button';\r\n\r\nimport { ButtonRow } from './styles';\r\n\r\nconst SimonBoard: FC = () => {\r\n    const renderButton = (value: ButtonColor) => <SimonButton key={value} buttonColor={value} />;\r\n\r\n    const renderRow = (row: ButtonColor[], index: number) => <ButtonRow key={index}>{row.map(renderButton)}</ButtonRow>;\r\n\r\n    return <div>{ButtonOrder.map(renderRow)}</div>;\r\n};\r\n\r\nexport default SimonBoard;\r\n","import React, { FC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from 'react-intl';\n\nconst SiteTitle: FC = () => {\n    const { formatMessage } = useIntl();\n    const title = formatMessage({ id: 'default.document.title' });\n\n    return <Helmet title={title} />;\n};\n\nexport default SiteTitle;\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    height: 35px;\r\n    min-width: 150px;\r\n    width: 250px;\r\n    margin-top: 10px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { StyledStartButton } from './styles';\r\n\r\nconst StartButton: FC = () => {\r\n    const { startGame, currentRound, canStartRound, allowUserInput } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const getButtonText = () => {\r\n        let buttonId = 'inProgress';\r\n        const nextRound = (currentRound || 0) + 1;\r\n        if (allowUserInput) {\r\n            buttonId = 'startGuess';\r\n        } else if (canStartRound) {\r\n            buttonId = currentRound ? 'startRound' : 'startGame';\r\n        }\r\n        const id = `startButton.text.${buttonId}`;\r\n        return formatMessage({ id }, { nextRound });\r\n    };\r\n\r\n    return (\r\n        <StyledStartButton disabled={!canStartRound} onClick={startGame}>\r\n            {getButtonText()}\r\n        </StyledStartButton>\r\n    );\r\n};\r\n\r\nexport default StartButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const BoardContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n`;\r\n","import React from 'react';\r\n\r\nimport CurrentHighScore from 'app/components/CurrentHighScore';\r\nimport LocaleChooser from 'app/components/LocaleChooser';\r\nimport SoundToggle from 'app/components/SoundToggle';\r\nimport SimonBoard from 'app/components/SimonBoard';\r\nimport SiteTitle from 'app/components/SiteTitle';\r\nimport StartButton from 'app/components/StartButton';\r\n\r\nimport { BoardContainer } from './styles';\r\n\r\nconst Board = () => (\r\n    <BoardContainer>\r\n        <SiteTitle />\r\n        <CurrentHighScore />\r\n        <SimonBoard />\r\n        <StartButton />\r\n        <LocaleChooser />\r\n        <SoundToggle />\r\n    </BoardContainer>\r\n);\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nimport wood from 'styles/image/wood.jpg';\r\n\r\nexport const OutsideWrapper = styled.div`\r\n    display: table;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-image: url(${wood});\r\n    background-size: cover;\r\n`;\r\n\r\nexport const MiddleWrapper = styled.div`\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n`;\r\n\r\nexport const InnerContent = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 25vw;\r\n    max-width: 675px;\r\n`;\r\n","import * as React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport AppContextProvider from 'app/context/AppContext';\r\nimport IntlContext from 'app/context/IntlContext';\r\n\r\nimport Board from 'app/views/board';\r\n\r\nimport { color } from 'styles/theme';\r\nimport { OutsideWrapper, MiddleWrapper, InnerContent } from './styles';\r\n\r\nconst App = () => (\r\n    <ThemeProvider theme={{ color }}>\r\n        <AppContextProvider>\r\n            <IntlContext>\r\n                <OutsideWrapper>\r\n                    <MiddleWrapper>\r\n                        <InnerContent>\r\n                            <Board />\r\n                        </InnerContent>\r\n                    </MiddleWrapper>\r\n                </OutsideWrapper>\r\n            </IntlContext>\r\n        </AppContextProvider>\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Index from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Index />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}