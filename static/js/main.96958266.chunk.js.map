{"version":3,"sources":["styles/image/wood.jpg","enums.ts","styles/theme/color.ts","utils/getRandomBoardColor.ts","app/context/AppContext.tsx","utils/zip-array.ts","app-constants.ts","app/components/Button/styles.ts","app/components/Button/Button.tsx","app/components/SimonBoard/styles.ts","app/components/SimonBoard/SimonBoard.tsx","app/views/board/board.tsx","app/styles.ts","app/index.tsx","serviceWorker.ts","styles/theme/index.ts","index.tsx"],"names":["module","exports","ButtonColor","color","$Green","$Green_Lit","$Red","$Red_Lit","$Yellow","$Yellow_Lit","$Blue","$Blue_Lit","getButtonHoverColorHex","buttonColor","Red","Blue","Yellow","Green","getRandomBoardColor","colors","Object","keys","map","k","Math","floor","random","length","initialState","allowUserInput","currentLitColor","currentRound","canStartRound","onButtonClick","roundData","startGame","userSelectedValues","AppContext","createContext","useApp","useContext","AppContextProvider","children","useState","setRoundData","setCurrentLitColor","toggleUserInput","setUserSelectedValues","toggleCanStartRound","roundId","getCurrentRoundData","find","r","showRoundColors","colorRotation","a","b","ret","maxLen","i","push","zipArray","range","setColor","index","forEach","ix","delay","isCorrectGuess","guesses","currentRoundData","isEqual","slice","contextState","newValues","concat","selectedValues","incorrect","attemptGuess","randomColor","createNewRoundData","Provider","value","ButtonOrder","SimonButton","styled","div","getButtonColorHex","isLit","Button","onClick","ButtonRow","SimonBoard","renderButton","key","row","Board","disabled","style","marginBottom","width","OutsideWrapper","wood","MiddleWrapper","InnerContent","App","Boolean","window","location","hostname","match","styledComponentsTheme","ReactDOM","render","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,oGCE/BC,E,8DCFCC,EAAQ,CACjBC,OAAQ,UACRC,WAAY,UACZC,KAAM,UACNC,SAAU,UACVC,QAAS,UACTC,YAAa,UACbC,MAAO,UACPC,UAAW,WDgBR,SAASC,EAAuBC,GACnC,OAAQA,GACJ,KAAKX,EAAYY,IACb,OAAOX,EAAMI,SACjB,KAAKL,EAAYa,KACb,OAAOZ,EAAMQ,UACjB,KAAKT,EAAYc,OACb,OAAOb,EAAMM,YACjB,KAAKP,EAAYe,MACb,OAAOd,EAAME,WACjB,QACI,OAAOF,EAAMM,aEhClB,SAASS,IACZ,IAAMC,EAASC,OAAOC,KAAKnB,GAAaoB,KAAI,SAAAC,GAAC,OAAIrB,EAAYqB,MAE7D,OAAOJ,EADWK,KAAKC,MAAMD,KAAKE,SAAWP,EAAOQ,U,SFH5CzB,K,UAAAA,E,YAAAA,E,gBAAAA,E,eAAAA,M,KEOL,ICUD0B,EAAsB,CACxBC,gBAAgB,EAChBC,gBAAiB,KACjBC,aAAc,KACdC,eAAe,EACfC,cAAe,kBAAM,MACrBC,UAAW,GACXC,UAAW,kBAAM,MACjBC,mBAAoB,IAGXC,EAAaC,wBAAcV,GA0F3BW,EAAS,kBAAMC,qBAAWH,IAExBI,EA1FgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACXC,mBAASf,EAAaM,WADX,mBACtCA,EADsC,KAC3BU,EAD2B,OAECD,mBAASf,EAAaE,iBAFvB,mBAEtCA,EAFsC,KAErBe,EAFqB,OAGHF,mBAASf,EAAaC,gBAHnB,mBAGtCA,EAHsC,KAGtBiB,EAHsB,OAIOH,mBAASf,EAAaQ,oBAJ7B,mBAItCA,EAJsC,KAIlBW,EAJkB,OAKAJ,mBAASf,EAAaI,eALtB,mBAKtCA,EALsC,KAKvBgB,EALuB,KAMvCjB,EAAeG,EAAUP,OAASO,EAAUA,EAAUP,OAAS,GAAGsB,QAAU,KAE5EC,EAAsB,kBAAMhB,EAAUiB,MAAK,SAAAC,GAAC,OAAIA,EAAEH,UAAYlB,MAiB9DsB,EAAkB,SAAClC,GACrB,IACMmC,EC3DC,SAASC,EAAUC,GAG9B,IAFA,IAAMC,EAAM,GACNC,EAASH,EAAE5B,OAAS6B,EAAE7B,OAAS4B,EAAE5B,OAAS6B,EAAE7B,OACzCgC,EAAI,EAAGA,EAAID,EAAQC,IACxBF,EAAIG,KAAKL,EAAEI,IACXF,EAAIG,KAAKJ,EAAEG,IAEf,OAAOF,EDoDmBI,CAAS1C,EADZ2C,gBAAM3C,EAAOQ,QAAQL,KAAI,kBAAM,SAE5CyC,EAAW,SAACC,GACVA,IAAUV,EAAc3B,OAAS,GACjCmB,GAAgB,GAEpBD,EAAmBS,EAAcU,KAGrCV,EAAcW,SAAQ,SAAC9D,EAAO+D,GAAR,OAAeC,gBAAMJ,EAAU,KAAQG,EAAK,GAAIA,OAmBpEE,EAAiB,SAACC,GACpB,IAAMC,EAAmBpB,IACzB,QAAKoB,GAGEC,kBAAQF,EAASC,EAAiBnE,MAAMqE,MAAM,EAAGH,EAAQ1C,UAc9D8C,EAAY,eACX7C,EADW,CAEdC,iBACAG,gBACAF,kBACAC,eACAE,cAjBkB,SAAC9B,GACnB,GAAK4B,GAGDK,EAAmBT,OAASI,EAAc,CAC1C,IAAM2C,EAAYtC,EAAmBuC,OAAOxE,GAC5C4C,EAAsB2B,GA9BT,SAACE,GAClB,IAAMN,EAAmBpB,IACzB,GAAKoB,EAAL,CAGA,IAAMO,GAAaT,EAAeQ,GAC9BC,GACAjC,EAAa,KAEbgC,EAAejD,SAAW2C,EAAiBnE,MAAMwB,QAAUkD,KAC3D/B,GAAgB,GAChBC,EAAsB,IACtBC,GAAoB,KAmBpB8B,CAAaJ,KAWjBxC,YACAC,UA9Dc,WACdW,GAAgB,GAChBE,GAAoB,GAXG,WACvB,IAAMC,GAAWlB,GAAgB,GAAK,EAChCuC,EAAmBpB,IACnB6B,EAAc,CAAC7D,KACff,EAAQmE,EAAmBA,EAAiBnE,MAAMwE,OAAOI,GAAeA,EAC9EnC,EAAaV,EAAUyC,OAAO,CAAE1B,UAAS9C,WACzCkD,EAAgBlD,GAMhB6E,IA4DA5C,uBAGJ,OAAO,kBAACC,EAAW4C,SAAZ,CAAqBC,MAAOT,GAAe/B,IEnHzCyC,EAAc,CACvB,CAACjF,EAAYe,MAAOf,EAAYc,QAChC,CAACd,EAAYY,IAAKZ,EAAYa,O,sQCM3B,IAAMqE,EAAcC,IAAOC,IAAV,KAIA,mBNLjB,SAA2BzE,GAC9B,OAAQA,GACJ,KAAKX,EAAYY,IACb,OAAOX,EAAMG,KACjB,KAAKJ,EAAYa,KACb,OAAOZ,EAAMO,MACjB,KAAKR,EAAYc,OACb,OAAOb,EAAMK,QACjB,KAAKN,EAAYe,MACb,OAAOd,EAAMC,OACjB,QACI,OAAOD,EAAMK,SMNoB+E,CAArB,EAAG1E,gBAKjB,gBAAGgB,EAAH,EAAGA,eAAgBhB,EAAnB,EAAmBA,YAAnB,OACEgB,GAAc,4BAAyBjB,EAAuBC,GAAhD,QAGpB,qBAAGgB,gBAAmC,sBAEtC,gBAAG2D,EAAH,EAAGA,MAAO3E,EAAV,EAAUA,YAAV,OAA4B2E,GAAK,4BAAyB5E,EAAuBC,GAAhD,QCMxB4E,EAnBW,SAAC,GAAqB,IAAnB5E,EAAkB,EAAlBA,YAAkB,EACgB0B,IAAnDT,EADmC,EACnCA,gBAAiBD,EADkB,EAClBA,eAAgBI,EADE,EACFA,cAQzC,OACI,kBAACmD,EAAD,CACIvD,eAAgBA,EAChBhB,YAAaA,EACb2E,MAAO1D,IAAoBjB,EAC3B6E,QAXQ,WACR7D,GACAI,EAAcpB,O,2FCfnB,IAAM8E,EAAYN,IAAOC,IAAV,KCePM,EARQ,WACnB,IAAMC,EAAe,SAACX,GAAD,OAAwB,kBAAC,EAAD,CAAaY,IAAKZ,EAAOrE,YAAaqE,KAInF,OAAO,6BAAMC,EAAY7D,KAFP,SAACyE,EAAoB/B,GAArB,OAAuC,kBAAC2B,EAAD,CAAWG,IAAK9B,GAAQ+B,EAAIzE,IAAIuE,SCgB9EG,EAvBG,WAAO,IAAD,EAC+CzD,IAA3DJ,EADY,EACZA,UAAWJ,EADC,EACDA,aAAcC,EADb,EACaA,cAAeH,EAD5B,EAC4BA,eAYhD,OACI,6BACI,4BAAQoE,UAAWjE,EAAekE,MAAO,CAAEC,aAAc,MAAOC,MAAO,QAAUV,QAASvD,GAX1FN,EACO,kBAEPG,EACM,SAAN,OAAgBD,EAAY,gBAAYA,EAAe,GAAM,QAE1D,eAQH,kBAAC,EAAD,Q,+jBCnBL,IAAMsE,EAAiBhB,IAAOC,IAAV,IAOCgB,KAIfC,EAAgBlB,IAAOC,IAAV,KAKbkB,EAAenB,IAAOC,IAAV,KCAVmB,EAZH,kBACR,gBAAC,EAAD,KACI,gBAACJ,EAAD,KACI,gBAACE,EAAD,KACI,gBAACC,EAAD,KACI,gBAAC,EAAD,WCDAE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBC,IAAMC,EAAwB,CACjC5G,SCMJ6G,IAASC,OACL,kBAAC,IAAD,CAAeC,MAAOH,GAClB,kBAAC,EAAD,OAEJI,SAASC,eAAe,SF+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.96958266.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wood.97685270.jpg\";","import { color } from 'styles/theme/color';\r\n\r\nexport enum ButtonColor {\r\n    Red = 'Red',\r\n    Blue = 'Blue',\r\n    Yellow = 'Yellow',\r\n    Green = 'Green'\r\n}\r\n\r\nexport function getButtonColorHex(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return color.$Red;\r\n        case ButtonColor.Blue:\r\n            return color.$Blue;\r\n        case ButtonColor.Yellow:\r\n            return color.$Yellow;\r\n        case ButtonColor.Green:\r\n            return color.$Green;\r\n        default:\r\n            return color.$Yellow;\r\n    }\r\n}\r\n\r\nexport function getButtonHoverColorHex(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return color.$Red_Lit;\r\n        case ButtonColor.Blue:\r\n            return color.$Blue_Lit;\r\n        case ButtonColor.Yellow:\r\n            return color.$Yellow_Lit;\r\n        case ButtonColor.Green:\r\n            return color.$Green_Lit;\r\n        default:\r\n            return color.$Yellow_Lit;\r\n    }\r\n}\r\n","export const color = {\r\n    $Green: '#23A623',\r\n    $Green_Lit: '#00F500',\r\n    $Red: '#B50D0D',\r\n    $Red_Lit: '#FF0000',\r\n    $Yellow: '#C2B206',\r\n    $Yellow_Lit: '#FFFF00',\r\n    $Blue: '#5454C4',\r\n    $Blue_Lit: '#0000FF'\r\n};\r\n","import { range } from 'lodash';\r\nimport { ButtonColor } from 'enums';\r\n\r\nexport function getRandomBoardColor(): ButtonColor {\r\n    const colors = Object.keys(ButtonColor).map(k => ButtonColor[k]);\r\n    const randomInt = Math.floor(Math.random() * colors.length);\r\n    return colors[randomInt];\r\n}\r\n\r\nexport const getRandomBoardColors = (count: number): ButtonColor[] => range(count).map(getRandomBoardColor);\r\n","import React, { createContext, FC, useState, useContext } from 'react';\r\nimport { delay, range, isEqual } from 'lodash';\r\n\r\nimport { Round } from 'types/round';\r\nimport { getRandomBoardColor } from 'utils/getRandomBoardColor';\r\nimport zipArray from 'utils/zip-array';\r\nimport { ButtonColor } from 'enums';\r\n\r\ninterface State {\r\n    currentRound: number | null;\r\n    canStartRound: boolean;\r\n    roundData: Round[];\r\n    currentLitColor: ButtonColor | null;\r\n    allowUserInput: boolean;\r\n    startGame: () => void;\r\n    userSelectedValues: ButtonColor[];\r\n    onButtonClick: (color: ButtonColor) => void;\r\n}\r\n\r\nconst initialState: State = {\r\n    allowUserInput: false,\r\n    currentLitColor: null,\r\n    currentRound: null,\r\n    canStartRound: true,\r\n    onButtonClick: () => null,\r\n    roundData: [],\r\n    startGame: () => null,\r\n    userSelectedValues: []\r\n};\r\n\r\nexport const AppContext = createContext(initialState);\r\n\r\nconst AppContextProvider: FC = ({ children }) => {\r\n    const [roundData, setRoundData] = useState(initialState.roundData);\r\n    const [currentLitColor, setCurrentLitColor] = useState(initialState.currentLitColor);\r\n    const [allowUserInput, toggleUserInput] = useState(initialState.allowUserInput);\r\n    const [userSelectedValues, setUserSelectedValues] = useState(initialState.userSelectedValues);\r\n    const [canStartRound, toggleCanStartRound] = useState(initialState.canStartRound);\r\n    const currentRound = roundData.length ? roundData[roundData.length - 1].roundId : null;\r\n\r\n    const getCurrentRoundData = () => roundData.find(r => r.roundId === currentRound);\r\n\r\n    const createNewRoundData = () => {\r\n        const roundId = (currentRound || 0) + 1;\r\n        const currentRoundData = getCurrentRoundData();\r\n        const randomColor = [getRandomBoardColor()];\r\n        const color = currentRoundData ? currentRoundData.color.concat(randomColor) : randomColor;\r\n        setRoundData(roundData.concat({ roundId, color }));\r\n        showRoundColors(color);\r\n    };\r\n\r\n    const startGame = () => {\r\n        toggleUserInput(false);\r\n        toggleCanStartRound(false);\r\n        createNewRoundData();\r\n    };\r\n\r\n    const showRoundColors = (colors: ButtonColor[]) => {\r\n        const emptyArray = range(colors.length).map(() => null);\r\n        const colorRotation = zipArray(colors, emptyArray);\r\n        const setColor = (index: number) => {\r\n            if (index === colorRotation.length - 1) {\r\n                toggleUserInput(true);\r\n            }\r\n            setCurrentLitColor(colorRotation[index]);\r\n        };\r\n\r\n        colorRotation.forEach((color, ix) => delay(setColor, 1000 * (ix + 1), ix));\r\n    };\r\n\r\n    const attemptGuess = (selectedValues: ButtonColor[]) => {\r\n        const currentRoundData = getCurrentRoundData();\r\n        if (!currentRoundData) {\r\n            return;\r\n        }\r\n        const incorrect = !isCorrectGuess(selectedValues);\r\n        if (incorrect) {\r\n            setRoundData([]);\r\n        }\r\n        if (selectedValues.length === currentRoundData.color.length || incorrect) {\r\n            toggleUserInput(false);\r\n            setUserSelectedValues([]);\r\n            toggleCanStartRound(true);\r\n        }\r\n    };\r\n\r\n    const isCorrectGuess = (guesses: ButtonColor[]) => {\r\n        const currentRoundData = getCurrentRoundData();\r\n        if (!currentRoundData) {\r\n            return false;\r\n        }\r\n        return isEqual(guesses, currentRoundData.color.slice(0, guesses.length));\r\n    };\r\n\r\n    const onButtonClick = (color: ButtonColor) => {\r\n        if (!currentRound) {\r\n            return;\r\n        }\r\n        if (userSelectedValues.length < currentRound) {\r\n            const newValues = userSelectedValues.concat(color);\r\n            setUserSelectedValues(newValues);\r\n            attemptGuess(newValues);\r\n        }\r\n    };\r\n\r\n    const contextState = {\r\n        ...initialState,\r\n        allowUserInput,\r\n        canStartRound,\r\n        currentLitColor,\r\n        currentRound,\r\n        onButtonClick,\r\n        roundData,\r\n        startGame,\r\n        userSelectedValues\r\n    };\r\n\r\n    return <AppContext.Provider value={contextState}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport const useApp = () => useContext(AppContext);\r\n\r\nexport default AppContextProvider;\r\n","export default function(a: any[], b: any[]): any[] {\r\n    const ret = [];\r\n    const maxLen = a.length > b.length ? a.length : b.length;\r\n    for (let i = 0; i < maxLen; i++) {\r\n        ret.push(a[i]);\r\n        ret.push(b[i]);\r\n    }\r\n    return ret;\r\n}\r\n","import { ButtonColor } from './enums';\r\n\r\nexport const ButtonOrder = [\r\n    [ButtonColor.Green, ButtonColor.Yellow],\r\n    [ButtonColor.Red, ButtonColor.Blue]\r\n];\r\n","import styled from 'styled-components';\r\n\r\nimport { ButtonColor, getButtonColorHex, getButtonHoverColorHex } from 'enums';\r\n\r\ninterface SimonButtonProps {\r\n    buttonColor: ButtonColor;\r\n    isLit: boolean;\r\n    allowUserInput: boolean;\r\n}\r\n\r\nexport const SimonButton = styled.div<SimonButtonProps>`\r\n    height: 100px;\r\n    width: 100px;\r\n    transition-duration: 0.4s;\r\n    background-color: ${({ buttonColor }) => getButtonColorHex(buttonColor)};\r\n\r\n    margin: 2px;\r\n\r\n    :hover {\r\n        ${({ allowUserInput, buttonColor }) =>\r\n            allowUserInput && `background-color: ${getButtonHoverColorHex(buttonColor)};`}\r\n    }\r\n\r\n    ${({ allowUserInput }) => allowUserInput && `cursor: pointer;`}\r\n\r\n    ${({ isLit, buttonColor }) => isLit && `background-color: ${getButtonHoverColorHex(buttonColor)};`}\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { SimonButton } from './styles';\r\n\r\ntype Props = {\r\n    buttonColor: ButtonColor;\r\n};\r\n\r\nconst Button: FC<Props> = ({ buttonColor }) => {\r\n    const { currentLitColor, allowUserInput, onButtonClick } = useApp();\r\n\r\n    const onClick = () => {\r\n        if (allowUserInput) {\r\n            onButtonClick(buttonColor);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <SimonButton\r\n            allowUserInput={allowUserInput}\r\n            buttonColor={buttonColor}\r\n            isLit={currentLitColor === buttonColor}\r\n            onClick={onClick}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nexport const ButtonRow = styled.div`\r\n    display: flex;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonOrder } from 'app-constants';\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport SimonButton from 'app/components/Button';\r\n\r\nimport { ButtonRow } from './styles';\r\n\r\nconst SimonBoard: FC = () => {\r\n    const renderButton = (value: ButtonColor) => <SimonButton key={value} buttonColor={value} />;\r\n\r\n    const renderRow = (row: ButtonColor[], index: number) => <ButtonRow key={index}>{row.map(renderButton)}</ButtonRow>;\r\n\r\n    return <div>{ButtonOrder.map(renderRow)}</div>;\r\n};\r\n\r\nexport default SimonBoard;\r\n","import React, { FC } from 'react';\r\n\r\nimport SimonBoard from 'app/components/SimonBoard';\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nconst Board: FC = () => {\r\n    const { startGame, currentRound, canStartRound, allowUserInput } = useApp();\r\n\r\n    const getButtonText = () => {\r\n        if (allowUserInput) {\r\n            return 'Start Guessing!';\r\n        }\r\n        if (canStartRound) {\r\n            return `Start ${currentRound ? `Round ${currentRound + 1}` : 'Game'}`;\r\n        }\r\n        return 'In Progress';\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button disabled={!canStartRound} style={{ marginBottom: '4px', width: '100%' }} onClick={startGame}>\r\n                {getButtonText()}\r\n            </button>\r\n            <SimonBoard />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nimport wood from 'styles/image/wood.jpg';\r\n\r\nexport const OutsideWrapper = styled.div`\r\n    display: table;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-image: url(${wood});\r\n    background-size: cover;\r\n`;\r\n\r\nexport const MiddleWrapper = styled.div`\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n`;\r\n\r\nexport const InnerContent = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 400px;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n","import * as React from 'react';\r\n\r\nimport AppContextProvider from 'app/context/AppContext';\r\n\r\nimport Board from 'app/views/board';\r\n\r\nimport { OutsideWrapper, MiddleWrapper, InnerContent } from './styles';\r\n\r\nconst App = () => (\r\n    <AppContextProvider>\r\n        <OutsideWrapper>\r\n            <MiddleWrapper>\r\n                <InnerContent>\r\n                    <Board />\r\n                </InnerContent>\r\n            </MiddleWrapper>\r\n        </OutsideWrapper>\r\n    </AppContextProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { color } from './color';\r\nexport const styledComponentsTheme = {\r\n    color\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Index from './app';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'styled-components';\nimport { styledComponentsTheme } from 'styles/theme';\n\nReactDOM.render(\n    <ThemeProvider theme={styledComponentsTheme}>\n        <Index />\n    </ThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}