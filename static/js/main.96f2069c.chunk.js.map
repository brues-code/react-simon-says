{"version":3,"sources":["styles/image/wood.jpg","sounds/applause.wav","sounds/aww.wav","sounds/a_sharp.wav","sounds/c_sharp.wav","sounds/f_sharp.wav","sounds/g_sharp.wav","enums.ts","utils/getRandomBoardColor.ts","utils/sounds.ts","styles/theme/color.ts","utils/addYearsToToday.ts","app-constants.ts","app/context/AppContext.tsx","utils/zip-array.ts","lib/i18n/index.ts","lib/i18n/messages.en.ts","lib/i18n/messages.es.ts","app/context/IntlContext.tsx","app/components/CurrentHighScore/styles.ts","app/components/CurrentHighScore/CurrentHighScore.tsx","app/components/LocaleChooser/styles.ts","app/components/LocaleChooser/LocaleChooser.tsx","app/components/Button/styles.ts","app/components/Button/Button.tsx","utils/getButtonColor.ts","app/components/SimonBoard/styles.ts","app/components/SimonBoard/SimonBoard.tsx","app/components/SiteTitle/SiteTitle.tsx","app/components/StartButton/styles.ts","app/components/StartButton/StartButton.tsx","app/views/board/styles.ts","app/views/board/board.tsx","app/styles.ts","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ButtonColor","Locales","getRandomBoardColor","colors","Object","keys","map","k","Math","floor","random","length","APPLAUSE","require","AWW","A_SHARP","C_SHARP","F_SHARP","G_SHARP","playSound","file","audio","Audio","volume","play","then","remove","playButtonSound","buttonColor","Red","Blue","Yellow","Green","getButtonSound","playCrowdSound","sound","color","$Green","$Green_Lit","$Red","$Red_Lit","$Yellow","$Yellow_Lit","$Blue","$Blue_Lit","addYearsToToday","years","dt","Date","setFullYear","getFullYear","ButtonOrder","DEFAULT_LOCALE","es","initialState","allowUserInput","canStartRound","clearHighScore","currentHighScore","onButtonClick","roundData","startGame","userSelectedValues","currentLocale","setCurrentLocale","AppContext","createContext","useApp","useContext","AppContextProvider","children","useCookies","cookies","setCookie","removeCookie","useState","setRoundData","currentLitColor","setCurrentLitColor","toggleUserInput","setUserSelectedValues","toggleCanStartRound","currentRoundData","last","currentRound","roundId","Number","showRoundColors","colorRotation","a","b","ret","maxLen","i","push","zipArray","fill","range","setColor","index","currentColor","forEach","ix","delay","attemptGuess","correct","isCorrectGuess","allAnswersCorrect","expires","guesses","isEqual","slice","contextState","newValues","concat","createNewRoundData","Provider","value","AppMessages","en","IntlContext","locale","messages","HighScoreHeader","styled","h2","ClearHighScoreButton","button","CurrentHighScore","formatMessage","useIntl","id","onClick","title","LocaleChooserRow","div","LocaleSelect","select","LocaleChooser","options","key","chooserDisabled","disabled","onChange","e","target","SimonButton","unlit","lit","isLit","Button","getButtonColorInfo","ButtonRow","SimonBoard","renderButton","row","SiteTitle","Helmet","StyledStartButton","StartButton","buttonId","nextRound","getButtonText","BoardContainer","Board","OutsideWrapper","wood","MiddleWrapper","InnerContent","App","theme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96f2069c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wood.97685270.jpg\";","module.exports = __webpack_public_path__ + \"static/media/applause.9cb7c788.wav\";","module.exports = __webpack_public_path__ + \"static/media/aww.827dbe6b.wav\";","module.exports = __webpack_public_path__ + \"static/media/a_sharp.8c41f6e6.wav\";","module.exports = __webpack_public_path__ + \"static/media/c_sharp.8b562331.wav\";","module.exports = __webpack_public_path__ + \"static/media/f_sharp.720b7b95.wav\";","module.exports = __webpack_public_path__ + \"static/media/g_sharp.14433c26.wav\";","export enum ButtonColor {\r\n    Red = 'Red',\r\n    Blue = 'Blue',\r\n    Yellow = 'Yellow',\r\n    Green = 'Green'\r\n}\r\n\r\nexport enum Locales {\r\n    en = 'en',\r\n    es = 'es'\r\n}\r\n","import { range } from 'lodash';\r\nimport { ButtonColor } from 'enums';\r\n\r\nexport function getRandomBoardColor(): ButtonColor {\r\n    const colors = Object.keys(ButtonColor).map(k => ButtonColor[k]);\r\n    const randomInt = Math.floor(Math.random() * colors.length);\r\n    return colors[randomInt];\r\n}\r\n\r\nexport const getRandomBoardColors = (count: number): ButtonColor[] => range(count).map(getRandomBoardColor);\r\n","import { ButtonColor } from 'enums';\r\n\r\nconst APPLAUSE = require('sounds/applause.wav');\r\nconst AWW = require('sounds/aww.wav');\r\nconst A_SHARP = require('sounds/a_sharp.wav');\r\nconst C_SHARP = require('sounds/c_sharp.wav');\r\nconst F_SHARP = require('sounds/f_sharp.wav');\r\nconst G_SHARP = require('sounds/g_sharp.wav');\r\n\r\nfunction getButtonSound(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return A_SHARP;\r\n        case ButtonColor.Blue:\r\n            return C_SHARP;\r\n        case ButtonColor.Yellow:\r\n            return G_SHARP;\r\n        case ButtonColor.Green:\r\n            return F_SHARP;\r\n        default:\r\n            return F_SHARP;\r\n    }\r\n}\r\n\r\nfunction playSound(file: string) {\r\n    const audio = new Audio(file);\r\n    audio.volume = 0.5;\r\n    audio.play().then(() => audio.remove());\r\n}\r\n\r\nexport function playButtonSound(buttonColor: ButtonColor) {\r\n    const sound = getButtonSound(buttonColor);\r\n    playSound(sound);\r\n}\r\n\r\ntype CrowdSounds = 'applause' | 'aww';\r\nexport function playCrowdSound(sound: CrowdSounds) {\r\n    const soundToPlay = sound === 'applause' ? APPLAUSE : AWW;\r\n    playSound(soundToPlay);\r\n}\r\n","export const color = {\r\n    $Green: '#23A623',\r\n    $Green_Lit: '#00F500',\r\n    $Red: '#B50D0D',\r\n    $Red_Lit: '#FF0000',\r\n    $Yellow: '#C2B206',\r\n    $Yellow_Lit: '#FFFF00',\r\n    $Blue: '#5454C4',\r\n    $Blue_Lit: '#0000FF'\r\n};\r\n","export function addYearsToToday(years: number): Date {\r\n    const dt = new Date();\r\n    return new Date(dt.setFullYear(dt.getFullYear() + years));\r\n}\r\n","import { ButtonColor, Locales } from 'enums';\r\n\r\nexport const ButtonOrder = [\r\n    [ButtonColor.Green, ButtonColor.Yellow],\r\n    [ButtonColor.Red, ButtonColor.Blue]\r\n];\r\n\r\nexport const DEFAULT_LOCALE = Locales.es;\r\n\r\nexport const HIGH_SCORE_COOKIE = 'high_score';\r\nexport const LOCALE_COOKIE = 'locale';\r\n","import React, { createContext, FC, useState, useContext, Dispatch } from 'react';\r\nimport { delay, range, isEqual, last, fill } from 'lodash';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { Round } from 'types/round';\r\nimport { getRandomBoardColor, zipArray, playButtonSound, playCrowdSound, addYearsToToday } from 'utils';\r\nimport { ButtonColor, Locales } from 'enums';\r\nimport { HIGH_SCORE_COOKIE, DEFAULT_LOCALE, LOCALE_COOKIE } from 'app-constants';\r\n\r\ninterface State {\r\n    allowUserInput: boolean;\r\n    canStartRound: boolean;\r\n    clearHighScore: () => void;\r\n    currentHighScore: number;\r\n    currentLitColor?: ButtonColor;\r\n    currentRound?: number;\r\n    onButtonClick: Dispatch<ButtonColor>;\r\n    roundData: Round[];\r\n    startGame: () => void;\r\n    userSelectedValues: ButtonColor[];\r\n    currentLocale: Locales;\r\n    setCurrentLocale: Dispatch<Locales>;\r\n}\r\n\r\nconst initialState: State = {\r\n    allowUserInput: false,\r\n    canStartRound: true,\r\n    clearHighScore: () => null,\r\n    currentHighScore: 0,\r\n    onButtonClick: () => null,\r\n    roundData: [],\r\n    startGame: () => null,\r\n    userSelectedValues: [],\r\n    currentLocale: DEFAULT_LOCALE,\r\n    setCurrentLocale: () => null\r\n};\r\n\r\nexport const AppContext = createContext(initialState);\r\n\r\nconst AppContextProvider: FC = ({ children }) => {\r\n    const [cookies, setCookie, removeCookie] = useCookies([HIGH_SCORE_COOKIE]);\r\n    const [roundData, setRoundData] = useState(initialState.roundData);\r\n    const [currentLitColor, setCurrentLitColor] = useState(initialState.currentLitColor);\r\n    const [allowUserInput, toggleUserInput] = useState(initialState.allowUserInput);\r\n    const [userSelectedValues, setUserSelectedValues] = useState(initialState.userSelectedValues);\r\n    const [canStartRound, toggleCanStartRound] = useState(initialState.canStartRound);\r\n    const [currentLocale, setCurrentLocale] = useState(cookies[LOCALE_COOKIE] || initialState.currentLocale);\r\n\r\n    const currentRoundData = last(roundData);\r\n    const currentRound = currentRoundData?.roundId || 0;\r\n    const currentHighScore = Number(cookies[HIGH_SCORE_COOKIE] || 0);\r\n\r\n    const createNewRoundData = () => {\r\n        const roundId = currentRound + 1;\r\n        const color = (currentRoundData?.color || []).concat([getRandomBoardColor()]);\r\n        setRoundData(roundData.concat({ roundId, color }));\r\n        showRoundColors(color);\r\n    };\r\n\r\n    const setHighScore = () => {\r\n        if (currentRound > currentHighScore) {\r\n            playCrowdSound('applause');\r\n            setCookie(HIGH_SCORE_COOKIE, currentRound, { expires: addYearsToToday(10) });\r\n        }\r\n    };\r\n\r\n    const clearHighScore = () => removeCookie(HIGH_SCORE_COOKIE);\r\n\r\n    const startGame = () => {\r\n        toggleUserInput(false);\r\n        toggleCanStartRound(false);\r\n        createNewRoundData();\r\n    };\r\n\r\n    const showRoundColors: Dispatch<ButtonColor[]> = colors => {\r\n        const emptyArray = fill(range(colors.length), null);\r\n        const colorRotation = zipArray(colors, emptyArray);\r\n        const setColor = (index: number) => {\r\n            if (index === colorRotation.length - 1) {\r\n                toggleUserInput(true);\r\n            }\r\n            const currentColor = colorRotation[index];\r\n            if (currentColor) {\r\n                playButtonSound(currentColor);\r\n            }\r\n            setCurrentLitColor(currentColor);\r\n        };\r\n\r\n        colorRotation.forEach((color, ix) => delay(setColor, 1000 * (ix + 1), ix));\r\n    };\r\n\r\n    const attemptGuess: Dispatch<ButtonColor[]> = colors => {\r\n        const correct = isCorrectGuess(colors);\r\n        const allAnswersCorrect = correct && colors.length === currentRoundData?.color.length;\r\n        if (!correct) {\r\n            setRoundData([]);\r\n            playCrowdSound('aww');\r\n        }\r\n        if (allAnswersCorrect) {\r\n            setHighScore();\r\n        }\r\n        if (allAnswersCorrect || !correct) {\r\n            toggleUserInput(false);\r\n            setUserSelectedValues([]);\r\n            toggleCanStartRound(true);\r\n        }\r\n    };\r\n\r\n    const isCorrectGuess = (guesses: ButtonColor[]) =>\r\n        isEqual(guesses, currentRoundData?.color.slice(0, guesses.length));\r\n\r\n    const onButtonClick: Dispatch<ButtonColor> = color => {\r\n        if (currentRound && allowUserInput) {\r\n            playButtonSound(color);\r\n            if (userSelectedValues.length < currentRound) {\r\n                const newValues = userSelectedValues.concat(color);\r\n                setCurrentLitColor(color);\r\n                delay(setCurrentLitColor, 500, null);\r\n                setUserSelectedValues(newValues);\r\n                attemptGuess(newValues);\r\n            }\r\n        }\r\n    };\r\n\r\n    const contextState = {\r\n        ...initialState,\r\n        allowUserInput,\r\n        canStartRound,\r\n        currentLitColor,\r\n        currentRound,\r\n        onButtonClick,\r\n        roundData,\r\n        startGame,\r\n        userSelectedValues,\r\n        currentHighScore,\r\n        clearHighScore,\r\n        currentLocale,\r\n        setCurrentLocale\r\n    };\r\n\r\n    return <AppContext.Provider value={contextState}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport const useApp = () => useContext(AppContext);\r\n\r\nexport default AppContextProvider;\r\n","export function zipArray(a: any[], b: any[]): any[] {\r\n    const ret = [];\r\n    const maxLen = a.length > b.length ? a.length : b.length;\r\n    for (let i = 0; i < maxLen; i++) {\r\n        ret.push(a[i]);\r\n        ret.push(b[i]);\r\n    }\r\n    return ret;\r\n}\r\n","import { Messages } from 'types/i18n';\n\nimport en from './messages.en';\nimport es from './messages.es';\n\nexport const AppMessages: { [languageCode: string]: Messages } = {\n    en,\n    es\n};\nexport default AppMessages;\n","import { Messages } from 'types/i18n';\n\nconst messages: Messages = {\n    'clearHighScore.button.text': 'Clear',\n    'clearHighScore.button.title': 'Clear high score',\n    'clearHighScore.header': 'High Score: {currentHighScore}',\n    'clearHighScore.header.empty': 'No High Score',\n    'default.document.title': 'React Simon Says',\n    'localeChooser.label': 'Locale:',\n    'localeChooser.value.en': 'English',\n    'localeChooser.value.es': 'Spanish',\n    'startButton.text.inProgress': 'In Progress',\n    'startButton.text.startGame': 'Start Game',\n    'startButton.text.startGuess': 'Start Guessing',\n    'startButton.text.startRound': 'Start Round {nextRound}'\n};\n\nexport default messages;\n","import { Messages } from 'types/i18n';\n\nconst messages: Messages = {\n    'clearHighScore.button.text': 'Clara',\n    'clearHighScore.button.title': 'Puntuación alta clara',\n    'clearHighScore.header': 'Puntuación Alta: {currentHighScore}',\n    'clearHighScore.header.empty': 'No Puntuación Alta',\n    'default.document.title': 'React Simón Dice',\n    'localeChooser.label': 'Localización:',\n    'localeChooser.value.en': 'Inglés',\n    'localeChooser.value.es': 'Español',\n    'startButton.text.inProgress': 'En progreso',\n    'startButton.text.startGame': 'Comenzar el juego',\n    'startButton.text.startGuess': 'Empieza a adivinar',\n    'startButton.text.startRound': 'Comienza la Ronda {nextRound}'\n};\n\nexport default messages;\n","import React, { FC } from 'react';\r\n\r\nimport { IntlProvider } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\nimport AppMessages from 'lib/i18n';\r\n\r\nconst IntlContext: FC = ({ children }) => {\r\n    const { currentLocale } = useApp();\r\n    return (\r\n        <IntlProvider locale={currentLocale} messages={AppMessages[currentLocale]}>\r\n            {children}\r\n        </IntlProvider>\r\n    );\r\n};\r\n\r\nexport default IntlContext;\r\n","import styled from 'styled-components';\r\n\r\nexport const HighScoreHeader = styled.h2`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport const ClearHighScoreButton = styled.button`\r\n    margin-top: 4px;\r\n    margin-left: 8px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { HighScoreHeader, ClearHighScoreButton } from './styles';\r\n\r\nconst CurrentHighScore: FC = () => {\r\n    const { currentHighScore, clearHighScore } = useApp();\r\n    const { formatMessage } = useIntl();\r\n    return (\r\n        <HighScoreHeader>\r\n            {currentHighScore ? (\r\n                <>\r\n                    {formatMessage({ id: 'clearHighScore.header' }, { currentHighScore })}\r\n                    <ClearHighScoreButton\r\n                        onClick={clearHighScore}\r\n                        title={formatMessage({ id: 'clearHighScore.button.title' })}\r\n                    >\r\n                        {formatMessage({ id: 'clearHighScore.button.text' })}\r\n                    </ClearHighScoreButton>\r\n                </>\r\n            ) : (\r\n                formatMessage({ id: 'clearHighScore.header.empty' })\r\n            )}\r\n        </HighScoreHeader>\r\n    );\r\n};\r\n\r\nexport default CurrentHighScore;\r\n","import styled from 'styled-components';\r\n\r\nexport const LocaleChooserRow = styled.div`\r\n    width: 100%;\r\n    padding-top: 8px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\nexport const LocaleSelect = styled.select`\r\n    margin-left: 8px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\nimport { Locales } from 'enums';\r\n\r\nimport { LocaleChooserRow, LocaleSelect } from './styles';\r\n\r\nconst LocaleChooser: FC = () => {\r\n    const { currentLocale, setCurrentLocale, allowUserInput, canStartRound } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const options = Object.keys(Locales)\r\n        .map(k => Locales[k])\r\n        .map(locale => (\r\n            <option key={locale} value={locale}>\r\n                {formatMessage({ id: `localeChooser.value.${locale}` })}\r\n            </option>\r\n        ));\r\n\r\n    const chooserDisabled = !canStartRound && !allowUserInput;\r\n\r\n    return (\r\n        <LocaleChooserRow>\r\n            <label>\r\n                {formatMessage({ id: 'localeChooser.label' })}\r\n                <LocaleSelect\r\n                    disabled={chooserDisabled}\r\n                    value={currentLocale}\r\n                    onChange={e => setCurrentLocale(Locales[e.target.value])}\r\n                >\r\n                    {options}\r\n                </LocaleSelect>\r\n            </label>\r\n        </LocaleChooserRow>\r\n    );\r\n};\r\n\r\nexport default LocaleChooser;\r\n","import styled from 'styled-components';\r\n\r\nimport { ButtonColorInfo } from 'utils';\r\n\r\ninterface SimonButtonProps extends ButtonColorInfo {\r\n    isLit: boolean;\r\n    allowUserInput: boolean;\r\n}\r\n\r\nexport const SimonButton = styled.div<SimonButtonProps>`\r\n    height: 25vh;\r\n    width: 25vh;\r\n    border-radius: 25px;\r\n    max-width: 49vw;\r\n    transition-duration: 0.4s;\r\n    -webkit-tap-highlight-color: transparent;\r\n    margin: 2px;\r\n    background-color: ${({ unlit }) => unlit};\r\n\r\n    :hover {\r\n        ${({ allowUserInput, lit }) => allowUserInput && `background-color: ${lit};`}\r\n    }\r\n\r\n    ${({ allowUserInput }) => allowUserInput && `cursor: pointer;`}\r\n    ${({ isLit, lit }) => isLit && `background-color: ${lit};`}\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonColor } from 'enums';\r\nimport { getButtonColorInfo } from 'utils';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { SimonButton } from './styles';\r\n\r\ntype Props = {\r\n    buttonColor: ButtonColor;\r\n};\r\n\r\nconst Button: FC<Props> = ({ buttonColor }) => {\r\n    const { currentLitColor, allowUserInput, onButtonClick } = useApp();\r\n\r\n    const onClick = () => onButtonClick(buttonColor);\r\n\r\n    return (\r\n        <SimonButton\r\n            allowUserInput={allowUserInput}\r\n            isLit={currentLitColor === buttonColor}\r\n            onClick={onClick}\r\n            {...getButtonColorInfo(buttonColor)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import { ButtonColor } from 'enums';\r\nimport { color } from 'styles/theme';\r\n\r\nexport interface ButtonColorInfo {\r\n    unlit: string;\r\n    lit: string;\r\n}\r\n\r\nexport function getButtonColorInfo(buttonColor: ButtonColor): ButtonColorInfo {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return { unlit: color.$Red, lit: color.$Red_Lit };\r\n        case ButtonColor.Blue:\r\n            return { unlit: color.$Blue, lit: color.$Blue_Lit };\r\n        case ButtonColor.Yellow:\r\n            return { unlit: color.$Yellow, lit: color.$Yellow_Lit };\r\n        default:\r\n            return { unlit: color.$Green, lit: color.$Green_Lit };\r\n    }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const ButtonRow = styled.div`\r\n    display: flex;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonOrder } from 'app-constants';\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport SimonButton from 'app/components/Button';\r\n\r\nimport { ButtonRow } from './styles';\r\n\r\nconst SimonBoard: FC = () => {\r\n    const renderButton = (value: ButtonColor) => <SimonButton key={value} buttonColor={value} />;\r\n\r\n    const renderRow = (row: ButtonColor[], index: number) => <ButtonRow key={index}>{row.map(renderButton)}</ButtonRow>;\r\n\r\n    return <div>{ButtonOrder.map(renderRow)}</div>;\r\n};\r\n\r\nexport default SimonBoard;\r\n","import React, { FC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from 'react-intl';\n\nconst SiteTitle: FC = () => {\n    const { formatMessage } = useIntl();\n    const title = formatMessage({ id: 'default.document.title' });\n\n    return <Helmet title={title} />;\n};\n\nexport default SiteTitle;\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    height: 35px;\r\n    min-width: 150px;\r\n    width: 250px;\r\n    margin-top: 10px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { StyledStartButton } from './styles';\r\n\r\nconst StartButton: FC = () => {\r\n    const { startGame, currentRound, canStartRound, allowUserInput } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const getButtonText = () => {\r\n        let buttonId = 'inProgress';\r\n        const nextRound = (currentRound || 0) + 1;\r\n        if (allowUserInput) {\r\n            buttonId = 'startGuess';\r\n        } else if (canStartRound) {\r\n            buttonId = currentRound ? 'startRound' : 'startGame';\r\n        }\r\n        const id = `startButton.text.${buttonId}`;\r\n        return formatMessage({ id }, { nextRound });\r\n    };\r\n\r\n    return (\r\n        <StyledStartButton disabled={!canStartRound} onClick={startGame}>\r\n            {getButtonText()}\r\n        </StyledStartButton>\r\n    );\r\n};\r\n\r\nexport default StartButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const BoardContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n`;\r\n","import React from 'react';\r\n\r\nimport CurrentHighScore from 'app/components/CurrentHighScore';\r\nimport LocaleChooser from 'app/components/LocaleChooser';\r\nimport SimonBoard from 'app/components/SimonBoard';\r\nimport SiteTitle from 'app/components/SiteTitle';\r\nimport StartButton from 'app/components/StartButton';\r\n\r\nimport { BoardContainer } from './styles';\r\n\r\nconst Board = () => (\r\n    <BoardContainer>\r\n        <SiteTitle />\r\n        <CurrentHighScore />\r\n        <SimonBoard />\r\n        <StartButton />\r\n        <LocaleChooser />\r\n    </BoardContainer>\r\n);\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nimport wood from 'styles/image/wood.jpg';\r\n\r\nexport const OutsideWrapper = styled.div`\r\n    display: table;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-image: url(${wood});\r\n    background-size: cover;\r\n`;\r\n\r\nexport const MiddleWrapper = styled.div`\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n`;\r\n\r\nexport const InnerContent = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 25vw;\r\n    max-width: 675px;\r\n`;\r\n","import * as React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport AppContextProvider from 'app/context/AppContext';\r\nimport IntlContext from 'app/context/IntlContext';\r\n\r\nimport Board from 'app/views/board';\r\n\r\nimport { color } from 'styles/theme';\r\nimport { OutsideWrapper, MiddleWrapper, InnerContent } from './styles';\r\n\r\nconst App = () => (\r\n    <ThemeProvider theme={{ color }}>\r\n        <AppContextProvider>\r\n            <IntlContext>\r\n                <OutsideWrapper>\r\n                    <MiddleWrapper>\r\n                        <InnerContent>\r\n                            <Board />\r\n                        </InnerContent>\r\n                    </MiddleWrapper>\r\n                </OutsideWrapper>\r\n            </IntlContext>\r\n        </AppContextProvider>\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Index from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Index />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}