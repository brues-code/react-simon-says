{"version":3,"sources":["styles/image/wood.jpg","enums.ts","app/context/AppContext.tsx","styles/theme/color.ts","app-constants.ts","app/components/Button/styles.ts","app/components/Button/Button.tsx","app/components/SimonBoard/styles.ts","app/components/SimonBoard/SimonBoard.tsx","app/views/board/board.tsx","app/styles.ts","app/index.tsx","serviceWorker.ts","styles/theme/index.ts","index.tsx"],"names":["module","exports","ButtonColor","initialState","currentRound","gameInProgress","roundData","AppContext","createContext","AppContextProvider","children","useState","contextState","Provider","value","color","$Green","$Green_Lit","$Red","$Red_Lit","$Yellow","$Yellow_Lit","$Blue","$Blue_Lit","ButtonOrder","Green","Yellow","Red","Blue","SimonButton","styled","div","buttonColor","getButtonColorHex","getButtonHoverColorHex","Button","ButtonRow","SimonBoard","renderButton","key","map","row","index","Board","props","OutsideWrapper","wood","MiddleWrapper","InnerContent","App","Boolean","window","location","hostname","match","styledComponentsTheme","ReactDOM","render","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,oGCE/BC,E,uDCQNC,EAAsB,CACxBC,aAAc,KACdC,gBAAgB,EAChBC,UAAW,IAGFC,EAAaC,wBAAcL,GAmBzBM,EAjBgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,mBAASR,EAAaC,cADjB,mBACtCA,EADsC,aAEEO,mBAASR,EAAaE,iBAFxB,mBAEtCA,EAFsC,aAGXM,mBAASR,EAAaG,YAHX,mBAGtCA,EAHsC,KAKvCM,GALuC,KAK3B,eACXT,EADW,CAEdC,eACAC,iBACAC,eAGJ,OAAO,kBAACC,EAAWM,SAAZ,CAAqBC,MAAOF,GAAeF,IC9BzCK,EAAQ,CACjBC,OAAQ,UACRC,WAAY,UACZC,KAAM,UACNC,SAAU,UACVC,QAAS,UACTC,YAAa,UACbC,MAAO,UACPC,UAAW,Y,SFNHrB,O,aAAAA,I,eAAAA,I,mBAAAA,I,kBAAAA,M,KGAL,IAAMsB,EAAc,CACvB,CAACtB,EAAYuB,MAAOvB,EAAYwB,QAChC,CAACxB,EAAYyB,IAAKzB,EAAY0B,O,+OCA3B,IAAMC,EAAcC,IAAOC,IAAV,KAIA,mBJCjB,SAA2BC,GAC9B,OAAQA,GACJ,KAAK9B,EAAYyB,IACb,OAAOZ,EAAMG,KACjB,KAAKhB,EAAY0B,KACb,OAAOb,EAAMO,MACjB,KAAKpB,EAAYwB,OACb,OAAOX,EAAMK,QACjB,KAAKlB,EAAYuB,MACb,OAAOV,EAAMC,OACjB,QACI,OAAOD,EAAMK,SIZoBa,CAArB,EAAGD,gBAGC,mBJarB,SAAgCA,GACnC,OAAQA,GACJ,KAAK9B,EAAYyB,IACb,OAAOZ,EAAMI,SACjB,KAAKjB,EAAY0B,KACb,OAAOb,EAAMQ,UACjB,KAAKrB,EAAYwB,OACb,OAAOX,EAAMM,YACjB,KAAKnB,EAAYuB,MACb,OAAOV,EAAME,WACjB,QACI,OAAOF,EAAMM,aIxBwBa,CAArB,EAAGF,gBCGhBG,EAJW,SAAC,GAAqB,IAAnBH,EAAkB,EAAlBA,YACzB,OAAO,kBAACH,EAAD,CAAaG,YAAaA,K,2FCT9B,IAAMI,EAAYN,IAAOC,IAAV,KCePM,EARQ,WACnB,IAAMC,EAAe,SAACxB,GAAD,OAAwB,kBAAC,EAAD,CAAayB,IAAKzB,EAAOkB,YAAalB,KAInF,OAAO,6BAAMU,EAAYgB,KAFP,SAACC,EAAoBC,GAArB,OAAuC,kBAACN,EAAD,CAAWG,IAAKG,GAAQD,EAAID,IAAIF,SCF9EK,EAJc,SAAAC,GACzB,OAAO,kBAAC,EAAD,O,+jBCHJ,IAAMC,EAAiBf,IAAOC,IAAV,IAOCe,KAIfC,EAAgBjB,IAAOC,IAAV,KAKbiB,EAAelB,IAAOC,IAAV,KCAVkB,EAZH,kBACR,gBAAC,EAAD,KACI,gBAACJ,EAAD,KACI,gBAACE,EAAD,KACI,gBAACC,EAAD,KACI,gBAAC,EAAD,WCDAE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBC,IAAMC,EAAwB,CACjCxC,SCMJyC,IAASC,OACL,kBAAC,IAAD,CAAeC,MAAOH,GAClB,kBAAC,EAAD,OAEJI,SAASC,eAAe,SF+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aad5762c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wood.97685270.jpg\";","import { color } from 'styles/theme/color';\r\n\r\nexport enum ButtonColor {\r\n    Red,\r\n    Blue,\r\n    Yellow,\r\n    Green\r\n}\r\n\r\nexport function getButtonColorHex(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return color.$Red;\r\n        case ButtonColor.Blue:\r\n            return color.$Blue;\r\n        case ButtonColor.Yellow:\r\n            return color.$Yellow;\r\n        case ButtonColor.Green:\r\n            return color.$Green;\r\n        default:\r\n            return color.$Yellow;\r\n    }\r\n}\r\n\r\nexport function getButtonHoverColorHex(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return color.$Red_Lit;\r\n        case ButtonColor.Blue:\r\n            return color.$Blue_Lit;\r\n        case ButtonColor.Yellow:\r\n            return color.$Yellow_Lit;\r\n        case ButtonColor.Green:\r\n            return color.$Green_Lit;\r\n        default:\r\n            return color.$Yellow_Lit;\r\n    }\r\n}\r\n","import React, { createContext, FC, useState, useContext } from 'react';\r\n\r\nimport { Round } from 'types/round';\r\n\r\ninterface State {\r\n    currentRound: number | null;\r\n    gameInProgress: boolean;\r\n    roundData: Array<Round>;\r\n}\r\n\r\nconst initialState: State = {\r\n    currentRound: null,\r\n    gameInProgress: false,\r\n    roundData: []\r\n};\r\n\r\nexport const AppContext = createContext(initialState);\r\n\r\nconst AppContextProvider: FC = ({ children }) => {\r\n    const [currentRound, setCurrentRound] = useState(initialState.currentRound);\r\n    const [gameInProgress, toggleGameInProgress] = useState(initialState.gameInProgress);\r\n    const [roundData, setRoundData] = useState(initialState.roundData);\r\n\r\n    const contextState = {\r\n        ...initialState,\r\n        currentRound,\r\n        gameInProgress,\r\n        roundData\r\n    };\r\n\r\n    return <AppContext.Provider value={contextState}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport const useApp = () => useContext(AppContext);\r\n\r\nexport default AppContextProvider;\r\n","export const color = {\r\n    $Green: '#23A623',\r\n    $Green_Lit: '#00F500',\r\n    $Red: '#B50D0D',\r\n    $Red_Lit: '#FF0000',\r\n    $Yellow: '#C2B206',\r\n    $Yellow_Lit: '#FFFF00',\r\n    $Blue: '#5454C4',\r\n    $Blue_Lit: '#0000FF'\r\n};\r\n","import { ButtonColor } from './enums';\r\n\r\nexport const ButtonOrder = [\r\n    [ButtonColor.Green, ButtonColor.Yellow],\r\n    [ButtonColor.Red, ButtonColor.Blue]\r\n];\r\n","import styled from 'styled-components';\r\n\r\nimport { ButtonColor, getButtonColorHex, getButtonHoverColorHex } from 'enums';\r\n\r\nexport const SimonButton = styled.div<{ buttonColor: ButtonColor }>`\r\n    height: 100px;\r\n    width: 100px;\r\n    transition-duration: 0.4s;\r\n    background-color: ${({ buttonColor }) => getButtonColorHex(buttonColor)};\r\n\r\n    :hover {\r\n        background-color: ${({ buttonColor }) => getButtonHoverColorHex(buttonColor)};\r\n    }\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport { SimonButton } from './styles';\r\n\r\ntype Props = {\r\n    buttonColor: ButtonColor;\r\n};\r\n\r\nconst Button: FC<Props> = ({ buttonColor }) => {\r\n    return <SimonButton buttonColor={buttonColor} />;\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nexport const ButtonRow = styled.div`\r\n    display: flex;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonOrder } from 'app-constants';\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport SimonButton from 'app/components/Button';\r\n\r\nimport { ButtonRow } from './styles';\r\n\r\nconst SimonBoard: FC = () => {\r\n    const renderButton = (value: ButtonColor) => <SimonButton key={value} buttonColor={value} />;\r\n\r\n    const renderRow = (row: ButtonColor[], index: number) => <ButtonRow key={index}>{row.map(renderButton)}</ButtonRow>;\r\n\r\n    return <div>{ButtonOrder.map(renderRow)}</div>;\r\n};\r\n\r\nexport default SimonBoard;\r\n","import React, { FC } from 'react';\r\n\r\nimport SimonBoard from 'app/components/SimonBoard';\r\n\r\ntype PropTypes = {};\r\n\r\nconst Board: FC<PropTypes> = props => {\r\n    return <SimonBoard />;\r\n};\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nimport wood from 'styles/image/wood.jpg';\r\n\r\nexport const OutsideWrapper = styled.div`\r\n    display: table;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-image: url(${wood});\r\n    background-size: cover;\r\n`;\r\n\r\nexport const MiddleWrapper = styled.div`\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n`;\r\n\r\nexport const InnerContent = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 400px;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n","import * as React from 'react';\r\n\r\nimport AppContextProvider from 'app/context/AppContext';\r\n\r\nimport Board from 'app/views/board';\r\n\r\nimport { OutsideWrapper, MiddleWrapper, InnerContent } from './styles';\r\n\r\nconst App = () => (\r\n    <AppContextProvider>\r\n        <OutsideWrapper>\r\n            <MiddleWrapper>\r\n                <InnerContent>\r\n                    <Board />\r\n                </InnerContent>\r\n            </MiddleWrapper>\r\n        </OutsideWrapper>\r\n    </AppContextProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { color } from './color';\r\nexport const styledComponentsTheme = {\r\n    color\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Index from './app';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'styled-components';\nimport { styledComponentsTheme } from 'styles/theme';\n\nReactDOM.render(\n    <ThemeProvider theme={styledComponentsTheme}>\n        <Index />\n    </ThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}