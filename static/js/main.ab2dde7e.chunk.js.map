{"version":3,"sources":["styles/image/wood.jpg","sounds/applause.wav","sounds/aww.wav","sounds/a_sharp.wav","sounds/c_sharp.wav","sounds/f_sharp.wav","sounds/g_sharp.wav","enums.ts","styles/theme/color.ts","utils/getRandomBoardColor.ts","utils/sounds.ts","app/context/AppContext.tsx","utils/zip-array.ts","app-constants.ts","app/components/Button/styles.ts","app/components/Button/Button.tsx","app/components/SimonBoard/styles.ts","app/components/SimonBoard/SimonBoard.tsx","app/components/StartButton/styles.ts","app/components/StartButton/StartButton.tsx","app/views/board/styles.ts","app/views/board/board.tsx","app/styles.ts","app/index.tsx","serviceWorker.ts","styles/theme/index.ts","index.tsx"],"names":["module","exports","ButtonColor","color","$Green","$Green_Lit","$Red","$Red_Lit","$Yellow","$Yellow_Lit","$Blue","$Blue_Lit","getButtonHoverColorHex","buttonColor","Red","Blue","Yellow","getRandomBoardColor","colors","Object","keys","map","k","Math","floor","random","length","applause","require","aww","a_sharp","c_sharp","f_sharp","g_sharp","playSound","file","audio","Audio","volume","play","playButtonSound","Green","getButtonSound","playCrowdSound","sound","initialState","allowUserInput","currentLitColor","currentRound","undefined","canStartRound","onButtonClick","roundData","startGame","userSelectedValues","AppContext","createContext","useApp","useContext","AppContextProvider","children","useState","setRoundData","setCurrentLitColor","toggleUserInput","setUserSelectedValues","toggleCanStartRound","currentRoundData","last","roundId","showRoundColors","colorRotation","a","b","ret","maxLen","i","push","zipArray","fill","range","setColor","index","currentColor","forEach","ix","delay","isCorrectGuess","guesses","isEqual","slice","contextState","newValues","concat","incorrect","allAnswers","attemptGuess","randomColor","createNewRoundData","Provider","value","ButtonOrder","SimonButton","styled","div","getButtonColorHex","isLit","Button","onClick","ButtonRow","SimonBoard","renderButton","key","row","StyledStartButton","button","StartButton","disabled","BoardContainer","Board","OutsideWrapper","wood","MiddleWrapper","InnerContent","App","Boolean","window","location","hostname","match","styledComponentsTheme","ReactDOM","render","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab2dde7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wood.97685270.jpg\";","module.exports = __webpack_public_path__ + \"static/media/applause.9cb7c788.wav\";","module.exports = __webpack_public_path__ + \"static/media/aww.827dbe6b.wav\";","module.exports = __webpack_public_path__ + \"static/media/a_sharp.8c41f6e6.wav\";","module.exports = __webpack_public_path__ + \"static/media/c_sharp.8b562331.wav\";","module.exports = __webpack_public_path__ + \"static/media/f_sharp.720b7b95.wav\";","module.exports = __webpack_public_path__ + \"static/media/g_sharp.14433c26.wav\";","import { color } from 'styles/theme/color';\r\n\r\nexport enum ButtonColor {\r\n    Red = 'Red',\r\n    Blue = 'Blue',\r\n    Yellow = 'Yellow',\r\n    Green = 'Green'\r\n}\r\n\r\nexport function getButtonColorHex(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return color.$Red;\r\n        case ButtonColor.Blue:\r\n            return color.$Blue;\r\n        case ButtonColor.Yellow:\r\n            return color.$Yellow;\r\n        default:\r\n            return color.$Green;\r\n    }\r\n}\r\n\r\nexport function getButtonHoverColorHex(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return color.$Red_Lit;\r\n        case ButtonColor.Blue:\r\n            return color.$Blue_Lit;\r\n        case ButtonColor.Yellow:\r\n            return color.$Yellow_Lit;\r\n        default:\r\n            return color.$Green_Lit;\r\n    }\r\n}\r\n","export const color = {\r\n    $Green: '#23A623',\r\n    $Green_Lit: '#00F500',\r\n    $Red: '#B50D0D',\r\n    $Red_Lit: '#FF0000',\r\n    $Yellow: '#C2B206',\r\n    $Yellow_Lit: '#FFFF00',\r\n    $Blue: '#5454C4',\r\n    $Blue_Lit: '#0000FF'\r\n};\r\n","import { range } from 'lodash';\r\nimport { ButtonColor } from 'enums';\r\n\r\nexport function getRandomBoardColor(): ButtonColor {\r\n    const colors = Object.keys(ButtonColor).map(k => ButtonColor[k]);\r\n    const randomInt = Math.floor(Math.random() * colors.length);\r\n    return colors[randomInt];\r\n}\r\n\r\nexport const getRandomBoardColors = (count: number): ButtonColor[] => range(count).map(getRandomBoardColor);\r\n","import { ButtonColor } from 'enums';\r\n\r\nconst applause = require('sounds/applause.wav');\r\nconst aww = require('sounds/aww.wav');\r\nconst a_sharp = require('sounds/a_sharp.wav');\r\nconst c_sharp = require('sounds/c_sharp.wav');\r\nconst f_sharp = require('sounds/f_sharp.wav');\r\nconst g_sharp = require('sounds/g_sharp.wav');\r\n\r\nfunction getButtonSound(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return a_sharp;\r\n        case ButtonColor.Blue:\r\n            return c_sharp;\r\n        case ButtonColor.Yellow:\r\n            return g_sharp;\r\n        case ButtonColor.Green:\r\n            return f_sharp;\r\n        default:\r\n            return f_sharp;\r\n    }\r\n}\r\n\r\nfunction playSound(file: string) {\r\n    const audio = new Audio(file);\r\n    audio.volume = 0.5;\r\n    audio.play();\r\n}\r\n\r\nexport function playButtonSound(buttonColor: ButtonColor) {\r\n    const sound = getButtonSound(buttonColor);\r\n    playSound(sound);\r\n}\r\n\r\nexport function playCrowdSound(sound: 'applause' | 'aww') {\r\n    const soundToPlay = sound === 'applause' ? applause : aww;\r\n    playSound(soundToPlay);\r\n}\r\n","import React, { createContext, FC, useState, useContext, Dispatch } from 'react';\r\nimport { delay, range, isEqual, last, fill } from 'lodash';\r\n\r\nimport { Round } from 'types/round';\r\nimport { getRandomBoardColor, zipArray, playButtonSound, playCrowdSound } from 'utils';\r\nimport { ButtonColor } from 'enums';\r\n\r\ninterface State {\r\n    currentRound: number | undefined;\r\n    canStartRound: boolean;\r\n    roundData: Round[];\r\n    currentLitColor: ButtonColor | null;\r\n    allowUserInput: boolean;\r\n    startGame: () => void;\r\n    userSelectedValues: ButtonColor[];\r\n    onButtonClick: Dispatch<ButtonColor>;\r\n}\r\n\r\nconst initialState: State = {\r\n    allowUserInput: false,\r\n    currentLitColor: null,\r\n    currentRound: undefined,\r\n    canStartRound: true,\r\n    onButtonClick: () => null,\r\n    roundData: [],\r\n    startGame: () => null,\r\n    userSelectedValues: []\r\n};\r\n\r\nexport const AppContext = createContext(initialState);\r\n\r\nconst AppContextProvider: FC = ({ children }) => {\r\n    const [roundData, setRoundData] = useState(initialState.roundData);\r\n    const [currentLitColor, setCurrentLitColor] = useState(initialState.currentLitColor);\r\n    const [allowUserInput, toggleUserInput] = useState(initialState.allowUserInput);\r\n    const [userSelectedValues, setUserSelectedValues] = useState(initialState.userSelectedValues);\r\n    const [canStartRound, toggleCanStartRound] = useState(initialState.canStartRound);\r\n\r\n    const currentRoundData = last(roundData);\r\n    const currentRound = currentRoundData?.roundId;\r\n\r\n    const createNewRoundData = () => {\r\n        const roundId = (currentRound || 0) + 1;\r\n        const randomColor = [getRandomBoardColor()];\r\n        const color = currentRoundData ? currentRoundData.color.concat(randomColor) : randomColor;\r\n        setRoundData(roundData.concat({ roundId, color }));\r\n        showRoundColors(color);\r\n    };\r\n\r\n    const startGame = () => {\r\n        toggleUserInput(false);\r\n        toggleCanStartRound(false);\r\n        createNewRoundData();\r\n    };\r\n\r\n    const showRoundColors: Dispatch<ButtonColor[]> = colors => {\r\n        const emptyArray = fill(range(colors.length), null);\r\n        const colorRotation = zipArray(colors, emptyArray);\r\n        const setColor = (index: number) => {\r\n            if (index === colorRotation.length - 1) {\r\n                toggleUserInput(true);\r\n            }\r\n            const currentColor = colorRotation[index];\r\n            if (currentColor) {\r\n                playButtonSound(currentColor);\r\n            }\r\n            setCurrentLitColor(currentColor);\r\n        };\r\n\r\n        colorRotation.forEach((color, ix) => delay(setColor, 1000 * (ix + 1), ix));\r\n    };\r\n\r\n    const attemptGuess: Dispatch<ButtonColor[]> = colors => {\r\n        const incorrect = !isCorrectGuess(colors);\r\n        const allAnswers = colors.length === currentRoundData?.color.length;\r\n        if (incorrect) {\r\n            setRoundData([]);\r\n            playCrowdSound('aww');\r\n        } else if (allAnswers) {\r\n            playCrowdSound('applause');\r\n        }\r\n        if (colors.length === currentRoundData?.color.length || incorrect) {\r\n            toggleUserInput(false);\r\n            setUserSelectedValues([]);\r\n            toggleCanStartRound(true);\r\n        }\r\n    };\r\n\r\n    const isCorrectGuess = (guesses: ButtonColor[]) =>\r\n        isEqual(guesses, currentRoundData?.color.slice(0, guesses.length));\r\n\r\n    const onButtonClick: Dispatch<ButtonColor> = color => {\r\n        if (!currentRound || !allowUserInput) {\r\n            return;\r\n        }\r\n        playButtonSound(color);\r\n        if (userSelectedValues.length < currentRound) {\r\n            const newValues = userSelectedValues.concat(color);\r\n            setUserSelectedValues(newValues);\r\n            attemptGuess(newValues);\r\n        }\r\n    };\r\n\r\n    const contextState = {\r\n        ...initialState,\r\n        allowUserInput,\r\n        canStartRound,\r\n        currentLitColor,\r\n        currentRound,\r\n        onButtonClick,\r\n        roundData,\r\n        startGame,\r\n        userSelectedValues\r\n    };\r\n\r\n    return <AppContext.Provider value={contextState}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport const useApp = () => useContext(AppContext);\r\n\r\nexport default AppContextProvider;\r\n","export function zipArray(a: any[], b: any[]): any[] {\r\n    const ret = [];\r\n    const maxLen = a.length > b.length ? a.length : b.length;\r\n    for (let i = 0; i < maxLen; i++) {\r\n        ret.push(a[i]);\r\n        ret.push(b[i]);\r\n    }\r\n    return ret;\r\n}\r\n","import { ButtonColor } from './enums';\r\n\r\nexport const ButtonOrder = [\r\n    [ButtonColor.Green, ButtonColor.Yellow],\r\n    [ButtonColor.Red, ButtonColor.Blue]\r\n];\r\n","import styled from 'styled-components';\r\n\r\nimport { ButtonColor, getButtonColorHex, getButtonHoverColorHex } from 'enums';\r\n\r\ninterface SimonButtonProps {\r\n    buttonColor: ButtonColor;\r\n    isLit: boolean;\r\n    allowUserInput: boolean;\r\n}\r\n\r\nexport const SimonButton = styled.div<SimonButtonProps>`\r\n    height: 25vh;\r\n    width: 25vh;\r\n    max-width: 49vw;\r\n    transition-duration: 0.4s;\r\n    margin: 2px;\r\n    background-color: ${({ buttonColor }) => getButtonColorHex(buttonColor)};\r\n\r\n    :hover {\r\n        ${({ allowUserInput, buttonColor }) =>\r\n            allowUserInput && `background-color: ${getButtonHoverColorHex(buttonColor)};`}\r\n    }\r\n\r\n    ${({ allowUserInput }) => allowUserInput && `cursor: pointer;`}\r\n    ${({ isLit, buttonColor }) => isLit && `background-color: ${getButtonHoverColorHex(buttonColor)};`}\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { SimonButton } from './styles';\r\n\r\ntype Props = {\r\n    buttonColor: ButtonColor;\r\n};\r\n\r\nconst Button: FC<Props> = ({ buttonColor }) => {\r\n    const { currentLitColor, allowUserInput, onButtonClick } = useApp();\r\n\r\n    const onClick = () => onButtonClick(buttonColor);\r\n\r\n    return (\r\n        <SimonButton\r\n            allowUserInput={allowUserInput}\r\n            buttonColor={buttonColor}\r\n            isLit={currentLitColor === buttonColor}\r\n            onClick={onClick}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nexport const ButtonRow = styled.div`\r\n    display: flex;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonOrder } from 'app-constants';\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport SimonButton from 'app/components/Button';\r\n\r\nimport { ButtonRow } from './styles';\r\n\r\nconst SimonBoard: FC = () => {\r\n    const renderButton = (value: ButtonColor) => <SimonButton key={value} buttonColor={value} />;\r\n\r\n    const renderRow = (row: ButtonColor[], index: number) => <ButtonRow key={index}>{row.map(renderButton)}</ButtonRow>;\r\n\r\n    return <div>{ButtonOrder.map(renderRow)}</div>;\r\n};\r\n\r\nexport default SimonBoard;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    height: 35px;\r\n    width: 60%;\r\n    margin-bottom: 10px;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { StyledStartButton } from './styles';\r\n\r\nconst StartButton: FC = () => {\r\n    const { startGame, currentRound, canStartRound, allowUserInput } = useApp();\r\n\r\n    const getButtonText = () => {\r\n        if (allowUserInput) {\r\n            return 'Start Guessing!';\r\n        }\r\n        if (canStartRound) {\r\n            return `Start ${currentRound ? `Round ${currentRound + 1}` : 'Game'}`;\r\n        }\r\n        return 'In Progress';\r\n    };\r\n\r\n    return (\r\n        <StyledStartButton disabled={!canStartRound} onClick={startGame}>\r\n            {getButtonText()}\r\n        </StyledStartButton>\r\n    );\r\n};\r\n\r\nexport default StartButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const BoardContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n`;\r\n","import React from 'react';\r\n\r\nimport SimonBoard from 'app/components/SimonBoard';\r\nimport StartButton from 'app/components/StartButton';\r\n\r\nimport { BoardContainer } from './styles';\r\n\r\nconst Board = () => (\r\n    <BoardContainer>\r\n        <StartButton />\r\n        <SimonBoard />\r\n    </BoardContainer>\r\n);\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nimport wood from 'styles/image/wood.jpg';\r\n\r\nexport const OutsideWrapper = styled.div`\r\n    display: table;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-image: url(${wood});\r\n    background-size: cover;\r\n`;\r\n\r\nexport const MiddleWrapper = styled.div`\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n`;\r\n\r\nexport const InnerContent = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 400px;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n","import * as React from 'react';\r\n\r\nimport AppContextProvider from 'app/context/AppContext';\r\n\r\nimport Board from 'app/views/board';\r\n\r\nimport { OutsideWrapper, MiddleWrapper, InnerContent } from './styles';\r\n\r\nconst App = () => (\r\n    <AppContextProvider>\r\n        <OutsideWrapper>\r\n            <MiddleWrapper>\r\n                <InnerContent>\r\n                    <Board />\r\n                </InnerContent>\r\n            </MiddleWrapper>\r\n        </OutsideWrapper>\r\n    </AppContextProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { color } from './color';\r\nexport const styledComponentsTheme = {\r\n    color\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Index from './app';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'styled-components';\nimport { styledComponentsTheme } from 'styles/theme';\n\nReactDOM.render(\n    <ThemeProvider theme={styledComponentsTheme}>\n        <Index />\n    </ThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}