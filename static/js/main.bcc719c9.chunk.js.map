{"version":3,"sources":["styles/image/wood.jpg","sounds/applause.wav","sounds/aww.wav","sounds/a_sharp.wav","sounds/c_sharp.wav","sounds/f_sharp.wav","sounds/g_sharp.wav","enums.ts","utils/getRandomBoardColor.ts","utils/sounds.ts","styles/theme/color.ts","utils/addYearsToToday.ts","utils/createKeyEffect.ts","app-constants.ts","app/context/AppContext.tsx","utils/zip-array.ts","lib/i18n/index.ts","lib/i18n/messages.en.ts","lib/i18n/messages.es.ts","lib/i18n/messages.fr.ts","app/context/IntlContext.tsx","app/components/CurrentHighScore/styles.ts","app/components/CurrentHighScore/CurrentHighScore.tsx","app/components/LocaleChooser/styles.ts","app/components/LocaleChooser/LocaleChooser.tsx","app/components/SoundToggle/SoundToggle.tsx","app/components/Button/styles.ts","app/components/Button/Button.tsx","utils/getButtonColor.ts","app/components/SimonBoard/styles.ts","app/components/SimonBoard/SimonBoard.tsx","app/components/SiteTitle/SiteTitle.tsx","app/components/StartButton/styles.ts","app/components/StartButton/StartButton.tsx","app/views/board/styles.ts","app/views/board/board.tsx","app/styles.ts","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ButtonColor","Locales","Cookies","KeyCode","getRandomBoardColor","colors","Object","keys","map","e","Math","floor","random","length","APPLAUSE","require","AWW","A_SHARP","C_SHARP","F_SHARP","G_SHARP","playSound","file","audio","Audio","volume","play","then","remove","playButtonSound","buttonColor","Red","Blue","Yellow","Green","getButtonSound","color","$Green","$Green_Lit","$Red","$Red_Lit","$Yellow","$Yellow_Lit","$Blue","$Blue_Lit","addYearsToToday","years","dt","Date","setFullYear","getFullYear","createKeyEffect","type","keyCode","func","_onKey","code","window","addEventListener","removeEventListener","ButtonOrder","DEFAULT_LOCALE","en","initialState","allowUserInput","canStartRound","clearHighScore","noop","currentLocale","handleUpdateLocale","onButtonClick","roundData","soundEnabled","startGame","toggleSound","userSelectedValues","preventChangeSettings","AppContext","createContext","useApp","useContext","AppContextProvider","children","useCookies","cookies","setCookie","removeCookie","useState","setRoundData","currentLitColor","setCurrentLitColor","toggleUserInput","setUserSelectedValues","toggleCanStartRound","SOUND","onToggleSound","LOCALE","setCurrentLocale","currentRoundData","last","currentRound","roundId","highScoreInfo","HIGH_SCORE","HIGH_SCORE_DATE","score","Number","date","undefined","onPlayCrowdSound","crowdSound","onPlayButtonSound","handleSetCookie","cookie","value","expires","concat","showRoundColors","createNewRoundData","useEffect","SPACE","colorRotation","a","b","ret","maxLen","i","push","zipArray","fill","range","setColor","index","currentColor","forEach","ix","delay","attemptGuess","correct","isCorrectGuess","allAnswersCorrect","guesses","isEqual","slice","contextState","locale","newValues","Provider","AppMessages","es","fr","IntlContext","messages","HighScoreContainer","styled","h2","HighScoreHeader","h3","HighScoreSubHeader","h5","HighScoreEmptyHeader","ClearHighScoreButton","button","CurrentHighScore","formatMessage","useIntl","id","disabled","onClick","title","toLocaleString","LocaleChooserRow","div","LocaleSelect","select","LocaleChooser","options","key","onChange","target","SoundToggle","M","style","paddingTop","name","checked","SimonButton","unlit","lit","isLit","Button","getButtonColorInfo","ButtonRow","SimonBoard","buttonIndex","renderButton","row","SiteTitle","Helmet","StyledStartButton","StartButton","buttonId","nextRound","getButtonText","BoardContainer","Board","OutsideWrapper","wood","MiddleWrapper","InnerContent","App","theme","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcc719c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wood.97685270.jpg\";","module.exports = __webpack_public_path__ + \"static/media/applause.9cb7c788.wav\";","module.exports = __webpack_public_path__ + \"static/media/aww.827dbe6b.wav\";","module.exports = __webpack_public_path__ + \"static/media/a_sharp.8c41f6e6.wav\";","module.exports = __webpack_public_path__ + \"static/media/c_sharp.8b562331.wav\";","module.exports = __webpack_public_path__ + \"static/media/f_sharp.720b7b95.wav\";","module.exports = __webpack_public_path__ + \"static/media/g_sharp.14433c26.wav\";","export enum ButtonColor {\r\n    Red = 'Red',\r\n    Blue = 'Blue',\r\n    Yellow = 'Yellow',\r\n    Green = 'Green'\r\n}\r\n\r\nexport enum Locales {\r\n    en = 'en',\r\n    es = 'es',\r\n    fr = 'fr'\r\n}\r\n\r\nexport enum Cookies {\r\n    SOUND = 'sound',\r\n    HIGH_SCORE = 'high_score',\r\n    LOCALE = 'locale',\r\n    HIGH_SCORE_DATE = 'high_score_date'\r\n}\r\n\r\nexport enum KeyCode {\r\n    Digit1 = 'Digit1',\r\n    Digit2 = 'Digit2',\r\n    Digit3 = 'Digit3',\r\n    Digit4 = 'Digit4',\r\n    M = 'KeyM',\r\n    SPACE = 'Space'\r\n}\r\n","import { range } from 'lodash';\r\nimport { ButtonColor } from 'enums';\r\n\r\nexport function getRandomBoardColor(): ButtonColor {\r\n    const colors = Object.keys(ButtonColor).map(e => ButtonColor[e]);\r\n    const randomInt = Math.floor(Math.random() * colors.length);\r\n    return colors[randomInt];\r\n}\r\n\r\nexport const getRandomBoardColors = (count: number): ButtonColor[] => range(count).map(getRandomBoardColor);\r\n","import { ButtonColor } from 'enums';\r\nimport { CrowdSounds } from 'types/crowd';\r\n\r\nconst APPLAUSE = require('sounds/applause.wav');\r\nconst AWW = require('sounds/aww.wav');\r\nconst A_SHARP = require('sounds/a_sharp.wav');\r\nconst C_SHARP = require('sounds/c_sharp.wav');\r\nconst F_SHARP = require('sounds/f_sharp.wav');\r\nconst G_SHARP = require('sounds/g_sharp.wav');\r\n\r\nfunction getButtonSound(buttonColor: ButtonColor) {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return A_SHARP;\r\n        case ButtonColor.Blue:\r\n            return C_SHARP;\r\n        case ButtonColor.Yellow:\r\n            return G_SHARP;\r\n        case ButtonColor.Green:\r\n            return F_SHARP;\r\n        default:\r\n            return F_SHARP;\r\n    }\r\n}\r\n\r\nfunction playSound(file: string) {\r\n    const audio = new Audio(file);\r\n    audio.volume = 0.5;\r\n    audio.play().then(() => audio.remove());\r\n}\r\n\r\nexport function playButtonSound(buttonColor: ButtonColor) {\r\n    const sound = getButtonSound(buttonColor);\r\n    playSound(sound);\r\n}\r\n\r\nexport function playCrowdSound(sound: CrowdSounds) {\r\n    const soundToPlay = sound === 'applause' ? APPLAUSE : AWW;\r\n    playSound(soundToPlay);\r\n}\r\n","export const color = {\r\n    $Green: '#23A623',\r\n    $Green_Lit: '#00F500',\r\n    $Red: '#B50D0D',\r\n    $Red_Lit: '#FF0000',\r\n    $Yellow: '#C2B206',\r\n    $Yellow_Lit: '#FFFF00',\r\n    $Blue: '#5454C4',\r\n    $Blue_Lit: '#0000FF'\r\n};\r\n","export function addYearsToToday(years: number): Date {\r\n    const dt = new Date();\r\n    return new Date(dt.setFullYear(dt.getFullYear() + years));\r\n}\r\n","export const createKeyEffect = (type: 'keyup' | 'keydown', keyCode: string, func: () => void) => () => {\r\n    const _onKey = ({ code }: KeyboardEvent) => code === keyCode && func();\r\n    window.addEventListener(type, _onKey);\r\n\r\n    return () => window.removeEventListener(type, _onKey);\r\n};\r\n","import { ButtonColor, Locales } from 'enums';\r\n\r\nexport const ButtonOrder = [\r\n    [ButtonColor.Green, ButtonColor.Yellow],\r\n    [ButtonColor.Red, ButtonColor.Blue]\r\n];\r\n\r\nexport const DEFAULT_LOCALE = Locales.en;\r\n","import React, { createContext, Dispatch, FC, useContext, useState, useEffect } from 'react';\r\nimport { delay, fill, isEqual, last, noop, range } from 'lodash';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { Round } from 'types/round';\r\nimport { CrowdSounds } from 'types/crowd';\r\nimport { HighScoreInfo } from 'types/score';\r\nimport {\r\n    addYearsToToday,\r\n    getRandomBoardColor,\r\n    playButtonSound,\r\n    playCrowdSound,\r\n    zipArray,\r\n    createKeyEffect\r\n} from 'utils';\r\nimport { ButtonColor, Cookies, Locales, KeyCode } from 'enums';\r\nimport { DEFAULT_LOCALE } from 'app-constants';\r\n\r\ninterface State {\r\n    allowUserInput: boolean;\r\n    canStartRound: boolean;\r\n    clearHighScore: () => void;\r\n    highScoreInfo?: HighScoreInfo;\r\n    currentLitColor?: ButtonColor;\r\n    currentLocale: Locales;\r\n    currentRound?: number;\r\n    handleUpdateLocale: Dispatch<Locales>;\r\n    onButtonClick: Dispatch<ButtonColor>;\r\n    roundData: Round[];\r\n    soundEnabled: boolean;\r\n    startGame: () => void;\r\n    toggleSound: Dispatch<boolean>;\r\n    userSelectedValues: ButtonColor[];\r\n    preventChangeSettings: boolean;\r\n}\r\n\r\nconst initialState: State = {\r\n    allowUserInput: false,\r\n    canStartRound: true,\r\n    clearHighScore: noop,\r\n    currentLocale: DEFAULT_LOCALE,\r\n    handleUpdateLocale: noop,\r\n    onButtonClick: noop,\r\n    roundData: [],\r\n    soundEnabled: true,\r\n    startGame: noop,\r\n    toggleSound: noop,\r\n    userSelectedValues: [],\r\n    preventChangeSettings: false\r\n};\r\n\r\nexport const AppContext = createContext(initialState);\r\n\r\nconst AppContextProvider: FC = ({ children }) => {\r\n    const [cookies, setCookie, removeCookie] = useCookies();\r\n    const [roundData, setRoundData] = useState(initialState.roundData);\r\n    const [currentLitColor, setCurrentLitColor] = useState(initialState.currentLitColor);\r\n    const [allowUserInput, toggleUserInput] = useState(initialState.allowUserInput);\r\n    const [userSelectedValues, setUserSelectedValues] = useState(initialState.userSelectedValues);\r\n    const [canStartRound, toggleCanStartRound] = useState(initialState.canStartRound);\r\n    const [soundEnabled, onToggleSound] = useState(\r\n        cookies[Cookies.SOUND] ? cookies[Cookies.SOUND] === 'true' : initialState.soundEnabled\r\n    );\r\n    const [currentLocale, setCurrentLocale] = useState(cookies[Cookies.LOCALE] || initialState.currentLocale);\r\n\r\n    const currentRoundData = last(roundData);\r\n    const currentRound = currentRoundData?.roundId || 0;\r\n    const preventChangeSettings = !(canStartRound || allowUserInput);\r\n\r\n    const highScoreInfo =\r\n        cookies[Cookies.HIGH_SCORE] && cookies[Cookies.HIGH_SCORE_DATE]\r\n            ? {\r\n                  score: Number(cookies[Cookies.HIGH_SCORE]),\r\n                  date: new Date(cookies[Cookies.HIGH_SCORE_DATE])\r\n              }\r\n            : undefined;\r\n\r\n    const createNewRoundData = () => {\r\n        const roundId = currentRound + 1;\r\n        const color = (currentRoundData?.color || []).concat([getRandomBoardColor()]);\r\n        setRoundData(roundData.concat({ roundId, color }));\r\n        showRoundColors(color);\r\n    };\r\n\r\n    const toggleSound: Dispatch<boolean> = value => {\r\n        onToggleSound(value);\r\n        handleSetCookie(Cookies.SOUND, value);\r\n    };\r\n\r\n    const onPlayCrowdSound: Dispatch<CrowdSounds> = crowdSound => soundEnabled && playCrowdSound(crowdSound);\r\n    const onPlayButtonSound: Dispatch<ButtonColor> = color => soundEnabled && playButtonSound(color);\r\n    const handleSetCookie = (cookie: Cookies, value: any) => {\r\n        setCookie(cookie, value, { expires: addYearsToToday(10) });\r\n    };\r\n\r\n    const setHighScore = () => {\r\n        if (!highScoreInfo || currentRound > highScoreInfo.score) {\r\n            onPlayCrowdSound('applause');\r\n            handleSetCookie(Cookies.HIGH_SCORE, currentRound);\r\n            handleSetCookie(Cookies.HIGH_SCORE_DATE, new Date());\r\n        }\r\n    };\r\n\r\n    const clearHighScore = () => removeCookie(Cookies.HIGH_SCORE);\r\n\r\n    const startGame = () => {\r\n        if (!canStartRound) {\r\n            return;\r\n        }\r\n\r\n        toggleUserInput(false);\r\n        toggleCanStartRound(false);\r\n        createNewRoundData();\r\n    };\r\n\r\n    // Starts game after user releases space bar\r\n    useEffect(createKeyEffect('keyup', KeyCode.SPACE, startGame));\r\n\r\n    const showRoundColors: Dispatch<ButtonColor[]> = colors => {\r\n        const emptyArray = fill(range(colors.length), null);\r\n        const colorRotation = zipArray(colors, emptyArray);\r\n        const setColor = (index: number) => {\r\n            if (index === colorRotation.length - 1) {\r\n                toggleUserInput(true);\r\n            }\r\n            const currentColor = colorRotation[index];\r\n            if (currentColor) {\r\n                onPlayButtonSound(currentColor);\r\n            }\r\n            setCurrentLitColor(currentColor);\r\n        };\r\n\r\n        colorRotation.forEach((color, ix) => delay(setColor, 1000 * (ix + 1), ix));\r\n    };\r\n\r\n    const attemptGuess: Dispatch<ButtonColor[]> = colors => {\r\n        const correct = isCorrectGuess(colors);\r\n        const allAnswersCorrect = correct && colors.length === currentRoundData?.color.length;\r\n        if (!correct) {\r\n            setRoundData([]);\r\n            onPlayCrowdSound('aww');\r\n        }\r\n        if (allAnswersCorrect) {\r\n            setHighScore();\r\n        }\r\n        if (allAnswersCorrect || !correct) {\r\n            toggleUserInput(false);\r\n            setUserSelectedValues([]);\r\n            toggleCanStartRound(true);\r\n        }\r\n    };\r\n\r\n    const isCorrectGuess = (guesses: ButtonColor[]) =>\r\n        isEqual(guesses, currentRoundData?.color.slice(0, guesses.length));\r\n\r\n    const onButtonClick: Dispatch<ButtonColor> = color => {\r\n        if (currentRound && allowUserInput) {\r\n            onPlayButtonSound(color);\r\n            if (userSelectedValues.length < currentRound) {\r\n                const newValues = userSelectedValues.concat(color);\r\n                setUserSelectedValues(newValues);\r\n                attemptGuess(newValues);\r\n                if (newValues.length === currentRound) {\r\n                    setCurrentLitColor(color);\r\n                    delay(setCurrentLitColor, 350, null);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleUpdateLocale: Dispatch<Locales> = locale => {\r\n        setCurrentLocale(locale);\r\n        handleSetCookie(Cookies.LOCALE, locale);\r\n    };\r\n\r\n    const contextState: State = {\r\n        ...initialState,\r\n        allowUserInput,\r\n        canStartRound,\r\n        clearHighScore,\r\n        currentLitColor,\r\n        currentLocale,\r\n        currentRound,\r\n        handleUpdateLocale,\r\n        highScoreInfo,\r\n        onButtonClick,\r\n        preventChangeSettings,\r\n        roundData,\r\n        soundEnabled,\r\n        startGame,\r\n        toggleSound,\r\n        userSelectedValues\r\n    };\r\n\r\n    return <AppContext.Provider value={contextState}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport const useApp = () => useContext(AppContext);\r\n\r\nexport default AppContextProvider;\r\n","export function zipArray(a: any[], b: any[]): any[] {\r\n    const ret = [];\r\n    const maxLen = a.length > b.length ? a.length : b.length;\r\n    for (let i = 0; i < maxLen; i++) {\r\n        ret.push(a[i]);\r\n        ret.push(b[i]);\r\n    }\r\n    return ret;\r\n}\r\n","import { Messages } from 'types/i18n';\nimport { Locales } from 'enums';\n\nimport en from './messages.en';\nimport es from './messages.es';\nimport fr from './messages.fr';\n\nexport const AppMessages: { [languageCode in Locales]: Messages } = { en, es, fr };\nexport default AppMessages;\n","import { Messages } from 'types/i18n';\n\nconst messages: Messages = {\n    'clearHighScore.button.text': 'Clear',\n    'clearHighScore.button.title': 'Clear high score',\n    'clearHighScore.header': 'High Score: {score}',\n    'clearHighScore.header.empty': 'No High Score',\n    'default.document.title': 'React Simon Says',\n    'localeChooser.label': 'Locale:',\n    'localeChooser.value.en': 'English',\n    'localeChooser.value.es': 'Spanish',\n    'localeChooser.value.fr': 'French',\n    'soundToggle.label': 'Sound',\n    'soundToggle.title': 'Toggle Sound',\n    'startButton.text.inProgress': 'Round {currentRound} in progress',\n    'startButton.text.startGame': 'Start Game',\n    'startButton.text.startGuess': 'Start Guessing',\n    'startButton.text.startRound': 'Start Round {nextRound}'\n};\n\nexport default messages;\n","import { Messages } from 'types/i18n';\n\nconst messages: Messages = {\n    'clearHighScore.button.text': 'Clara',\n    'clearHighScore.button.title': 'Puntuación alta clara',\n    'clearHighScore.header': 'Puntuación Alta: {score}',\n    'clearHighScore.header.empty': 'No Puntuación Alta',\n    'default.document.title': 'React Simón Dice',\n    'localeChooser.label': 'Localización:',\n    'localeChooser.value.en': 'Inglés',\n    'localeChooser.value.es': 'Español',\n    'localeChooser.value.fr': 'Francés',\n    'soundToggle.label': 'Sonido',\n    'soundToggle.title': 'Cambiar el Sonido',\n    'startButton.text.inProgress': 'Ronda {currentRound} en progreso',\n    'startButton.text.startGame': 'Comenzar el juego',\n    'startButton.text.startGuess': 'Empieza a adivinar',\n    'startButton.text.startRound': 'Comienza la Ronda {nextRound}'\n};\n\nexport default messages;\n","import { Messages } from 'types/i18n';\r\n\r\nconst messages: Messages = {\r\n    'clearHighScore.button.text': 'Clair',\r\n    'clearHighScore.button.title': 'Score élevé clair',\r\n    'clearHighScore.header': 'Score élevé: {score}',\r\n    'clearHighScore.header.empty': 'Pas de score élevé',\r\n    'default.document.title': 'React Simon Dit',\r\n    'localeChooser.label': 'Locale:',\r\n    'localeChooser.value.en': 'Anglais',\r\n    'localeChooser.value.es': 'Espagnol',\r\n    'localeChooser.value.fr': 'Français',\r\n    'soundToggle.label': 'Bruit',\r\n    'soundToggle.title': 'Basculer Bruit',\r\n    'startButton.text.inProgress': 'Ronde {currentRound} en cours',\r\n    'startButton.text.startGame': 'Démarrer le jeu',\r\n    'startButton.text.startGuess': 'Commencez à deviner',\r\n    'startButton.text.startRound': 'Début de la ronde {nextRound}'\r\n};\r\n\r\nexport default messages;\r\n","import React, { FC } from 'react';\r\nimport { IntlProvider } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\nimport AppMessages from 'lib/i18n';\r\n\r\nconst IntlContext: FC = ({ children }) => {\r\n    const { currentLocale } = useApp();\r\n    return (\r\n        <IntlProvider locale={currentLocale} messages={AppMessages[currentLocale]}>\r\n            {children}\r\n        </IntlProvider>\r\n    );\r\n};\r\n\r\nexport default IntlContext;\r\n","import styled from 'styled-components';\r\n\r\nexport const HighScoreContainer = styled.h2`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    white-space: nowrap;\r\n    margin: 0;\r\n`;\r\n\r\nexport const HighScoreHeader = styled.h3`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 0;\r\n`;\r\n\r\nexport const HighScoreSubHeader = styled.h5`\r\n    margin: 0 0 5px 0;\r\n`;\r\n\r\nexport const HighScoreEmptyHeader = styled.h2`\r\n    margin: 0 0 5px 0;\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport const ClearHighScoreButton = styled.button`\r\n    margin-left: 8px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport {\r\n    HighScoreContainer,\r\n    ClearHighScoreButton,\r\n    HighScoreHeader,\r\n    HighScoreSubHeader,\r\n    HighScoreEmptyHeader\r\n} from './styles';\r\n\r\nconst CurrentHighScore: FC = () => {\r\n    const { highScoreInfo, clearHighScore, preventChangeSettings } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    return highScoreInfo ? (\r\n        <HighScoreContainer>\r\n            <HighScoreHeader>\r\n                {formatMessage({ id: 'clearHighScore.header' }, { score: highScoreInfo.score })}\r\n                <ClearHighScoreButton\r\n                    disabled={preventChangeSettings}\r\n                    onClick={clearHighScore}\r\n                    title={formatMessage({ id: 'clearHighScore.button.title' })}\r\n                >\r\n                    {formatMessage({ id: 'clearHighScore.button.text' })}\r\n                </ClearHighScoreButton>\r\n            </HighScoreHeader>\r\n            <HighScoreSubHeader>{highScoreInfo.date.toLocaleString()}</HighScoreSubHeader>\r\n        </HighScoreContainer>\r\n    ) : (\r\n        <HighScoreEmptyHeader>{formatMessage({ id: 'clearHighScore.header.empty' })}</HighScoreEmptyHeader>\r\n    );\r\n};\r\n\r\nexport default CurrentHighScore;\r\n","import styled from 'styled-components';\r\n\r\nexport const LocaleChooserRow = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-shrink: 0;\r\n    justify-content: center;\r\n    padding-top: 8px;\r\n    width: 100%;\r\n`;\r\nexport const LocaleSelect = styled.select`\r\n    margin-left: 8px;\r\n    flex-shrink: 0;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\nimport { Locales } from 'enums';\r\n\r\nimport { LocaleChooserRow, LocaleSelect } from './styles';\r\n\r\nconst LocaleChooser: FC = () => {\r\n    const { currentLocale, handleUpdateLocale, preventChangeSettings } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const options = Object.keys(Locales)\r\n        .map(e => Locales[e])\r\n        .map(locale => (\r\n            <option key={locale} value={locale}>\r\n                {formatMessage({ id: `localeChooser.value.${locale}` })}\r\n            </option>\r\n        ));\r\n\r\n    return (\r\n        <LocaleChooserRow>\r\n            {formatMessage({ id: 'localeChooser.label' })}\r\n            <LocaleSelect\r\n                disabled={preventChangeSettings}\r\n                value={currentLocale}\r\n                onChange={e => handleUpdateLocale(Locales[e.target.value])}\r\n            >\r\n                {options}\r\n            </LocaleSelect>\r\n        </LocaleChooserRow>\r\n    );\r\n};\r\n\r\nexport default LocaleChooser;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\nimport { createKeyEffect } from 'utils';\r\nimport { KeyCode } from 'enums';\r\n\r\nconst SoundToggle: FC = () => {\r\n    const { soundEnabled, toggleSound, preventChangeSettings } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const onToggleSound = () => !preventChangeSettings && toggleSound(!soundEnabled);\r\n\r\n    useEffect(createKeyEffect('keyup', KeyCode.M, onToggleSound));\r\n\r\n    return (\r\n        <div style={{ paddingTop: '4px' }}>\r\n            <input\r\n                name=\"soundToggle\"\r\n                type=\"checkbox\"\r\n                checked={soundEnabled}\r\n                disabled={preventChangeSettings}\r\n                onChange={onToggleSound}\r\n                title={formatMessage({ id: 'soundToggle.title' })}\r\n            />\r\n            {formatMessage({ id: 'soundToggle.label' })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SoundToggle;\r\n","import styled from 'styled-components';\r\n\r\nimport { ButtonColorInfo } from 'utils';\r\n\r\ninterface SimonButtonProps extends ButtonColorInfo {\r\n    isLit: boolean;\r\n    allowUserInput: boolean;\r\n}\r\n\r\nexport const SimonButton = styled.div<SimonButtonProps>`\r\n    height: 25vh;\r\n    width: 25vh;\r\n    border-radius: 25px;\r\n    max-width: 49vw;\r\n    transition-duration: 0.4s;\r\n    -webkit-tap-highlight-color: transparent;\r\n    margin: 2px;\r\n    background-color: ${({ unlit }) => unlit};\r\n\r\n    :hover {\r\n        ${({ allowUserInput, lit }) => allowUserInput && `background-color: ${lit};`}\r\n    }\r\n\r\n    ${({ allowUserInput }) => allowUserInput && `cursor: pointer;`}\r\n    ${({ isLit, lit }) => isLit && `background-color: ${lit};`}\r\n`;\r\n","import React, { FC, useEffect } from 'react';\r\n\r\nimport { ButtonColor } from 'enums';\r\nimport { getButtonColorInfo, createKeyEffect } from 'utils';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { SimonButton } from './styles';\r\n\r\ntype Props = {\r\n    buttonColor: ButtonColor;\r\n    index: number;\r\n};\r\n\r\nconst Button: FC<Props> = ({ buttonColor, index }) => {\r\n    const { currentLitColor, allowUserInput, onButtonClick } = useApp();\r\n    const onClick = () => onButtonClick(buttonColor);\r\n\r\n    useEffect(createKeyEffect('keyup', `Digit${index}`, onClick));\r\n\r\n    return (\r\n        <SimonButton\r\n            allowUserInput={allowUserInput}\r\n            isLit={currentLitColor === buttonColor}\r\n            onClick={onClick}\r\n            {...getButtonColorInfo(buttonColor)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import { ButtonColor } from 'enums';\r\nimport { color } from 'styles/theme';\r\n\r\nexport interface ButtonColorInfo {\r\n    unlit: string;\r\n    lit: string;\r\n}\r\n\r\nexport function getButtonColorInfo(buttonColor: ButtonColor): ButtonColorInfo {\r\n    switch (buttonColor) {\r\n        case ButtonColor.Red:\r\n            return { unlit: color.$Red, lit: color.$Red_Lit };\r\n        case ButtonColor.Blue:\r\n            return { unlit: color.$Blue, lit: color.$Blue_Lit };\r\n        case ButtonColor.Yellow:\r\n            return { unlit: color.$Yellow, lit: color.$Yellow_Lit };\r\n        default:\r\n            return { unlit: color.$Green, lit: color.$Green_Lit };\r\n    }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const ButtonRow = styled.div`\r\n    display: flex;\r\n`;\r\n","import React, { FC } from 'react';\r\n\r\nimport { ButtonOrder } from 'app-constants';\r\nimport { ButtonColor } from 'enums';\r\n\r\nimport SimonButton from 'app/components/Button';\r\n\r\nimport { ButtonRow } from './styles';\r\n\r\nconst SimonBoard: FC = () => {\r\n    let buttonIndex = 0;\r\n    const renderButton = (value: ButtonColor) => <SimonButton key={value} buttonColor={value} index={++buttonIndex} />;\r\n\r\n    const renderRow = (row: ButtonColor[], index: number) => <ButtonRow key={index}>{row.map(renderButton)}</ButtonRow>;\r\n\r\n    return <>{ButtonOrder.map(renderRow)}</>;\r\n};\r\n\r\nexport default SimonBoard;\r\n","import React, { FC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from 'react-intl';\n\nconst SiteTitle: FC = () => {\n    const { formatMessage } = useIntl();\n    const title = formatMessage({ id: 'default.document.title' });\n\n    return <Helmet title={title} />;\n};\n\nexport default SiteTitle;\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    height: 35px;\r\n    min-width: 150px;\r\n    width: 250px;\r\n    margin-top: 10px;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useApp } from 'app/context/AppContext';\r\n\r\nimport { StyledStartButton } from './styles';\r\n\r\nconst StartButton: FC = () => {\r\n    const { startGame, currentRound, canStartRound, allowUserInput } = useApp();\r\n    const { formatMessage } = useIntl();\r\n\r\n    const getButtonText = () => {\r\n        let buttonId = 'inProgress';\r\n        const nextRound = (currentRound || 0) + 1;\r\n        if (allowUserInput) {\r\n            buttonId = 'startGuess';\r\n        } else if (canStartRound) {\r\n            buttonId = currentRound ? 'startRound' : 'startGame';\r\n        }\r\n        const id = `startButton.text.${buttonId}`;\r\n        return formatMessage({ id }, { nextRound, currentRound });\r\n    };\r\n\r\n    return (\r\n        <StyledStartButton disabled={!canStartRound} onClick={startGame}>\r\n            {getButtonText()}\r\n        </StyledStartButton>\r\n    );\r\n};\r\n\r\nexport default StartButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const BoardContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n`;\r\n","import React from 'react';\r\n\r\nimport CurrentHighScore from 'app/components/CurrentHighScore';\r\nimport LocaleChooser from 'app/components/LocaleChooser';\r\nimport SoundToggle from 'app/components/SoundToggle';\r\nimport SimonBoard from 'app/components/SimonBoard';\r\nimport SiteTitle from 'app/components/SiteTitle';\r\nimport StartButton from 'app/components/StartButton';\r\n\r\nimport { BoardContainer } from './styles';\r\n\r\nconst Board = () => (\r\n    <BoardContainer>\r\n        <SiteTitle />\r\n        <CurrentHighScore />\r\n        <SimonBoard />\r\n        <StartButton />\r\n        <LocaleChooser />\r\n        <SoundToggle />\r\n    </BoardContainer>\r\n);\r\n\r\nexport default Board;\r\n","import styled from 'styled-components';\r\n\r\nimport wood from 'styles/image/wood.jpg';\r\n\r\nexport const OutsideWrapper = styled.div`\r\n    display: table;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-image: url(${wood});\r\n    background-size: cover;\r\n`;\r\n\r\nexport const MiddleWrapper = styled.div`\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n`;\r\n\r\nexport const InnerContent = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 25vw;\r\n    max-width: 675px;\r\n`;\r\n","import React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport AppContextProvider from 'app/context/AppContext';\r\nimport IntlContext from 'app/context/IntlContext';\r\n\r\nimport Board from 'app/views/board';\r\n\r\nimport { color } from 'styles/theme';\r\nimport { OutsideWrapper, MiddleWrapper, InnerContent } from './styles';\r\n\r\nconst App = () => (\r\n    <ThemeProvider theme={{ color }}>\r\n        <AppContextProvider>\r\n            <IntlContext>\r\n                <OutsideWrapper>\r\n                    <MiddleWrapper>\r\n                        <InnerContent>\r\n                            <Board />\r\n                        </InnerContent>\r\n                    </MiddleWrapper>\r\n                </OutsideWrapper>\r\n            </IntlContext>\r\n        </AppContextProvider>\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Index from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Index />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}